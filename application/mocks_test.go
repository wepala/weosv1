// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application_test

import (
	"github.com/sirupsen/logrus"
	"sync"
)

var (
	lockExt1FieldLoggerMockDebug      sync.RWMutex
	lockExt1FieldLoggerMockDebugf     sync.RWMutex
	lockExt1FieldLoggerMockDebugln    sync.RWMutex
	lockExt1FieldLoggerMockError      sync.RWMutex
	lockExt1FieldLoggerMockErrorf     sync.RWMutex
	lockExt1FieldLoggerMockErrorln    sync.RWMutex
	lockExt1FieldLoggerMockFatal      sync.RWMutex
	lockExt1FieldLoggerMockFatalf     sync.RWMutex
	lockExt1FieldLoggerMockFatalln    sync.RWMutex
	lockExt1FieldLoggerMockInfo       sync.RWMutex
	lockExt1FieldLoggerMockInfof      sync.RWMutex
	lockExt1FieldLoggerMockInfoln     sync.RWMutex
	lockExt1FieldLoggerMockPanic      sync.RWMutex
	lockExt1FieldLoggerMockPanicf     sync.RWMutex
	lockExt1FieldLoggerMockPanicln    sync.RWMutex
	lockExt1FieldLoggerMockPrint      sync.RWMutex
	lockExt1FieldLoggerMockPrintf     sync.RWMutex
	lockExt1FieldLoggerMockPrintln    sync.RWMutex
	lockExt1FieldLoggerMockTrace      sync.RWMutex
	lockExt1FieldLoggerMockTracef     sync.RWMutex
	lockExt1FieldLoggerMockTraceln    sync.RWMutex
	lockExt1FieldLoggerMockWarn       sync.RWMutex
	lockExt1FieldLoggerMockWarnf      sync.RWMutex
	lockExt1FieldLoggerMockWarning    sync.RWMutex
	lockExt1FieldLoggerMockWarningf   sync.RWMutex
	lockExt1FieldLoggerMockWarningln  sync.RWMutex
	lockExt1FieldLoggerMockWarnln     sync.RWMutex
	lockExt1FieldLoggerMockWithError  sync.RWMutex
	lockExt1FieldLoggerMockWithField  sync.RWMutex
	lockExt1FieldLoggerMockWithFields sync.RWMutex
)

// Ensure, that Ext1FieldLoggerMock does implement logrus.Ext1FieldLogger.
// If this is not the case, regenerate this file with moq.
var _ logrus.Ext1FieldLogger = &Ext1FieldLoggerMock{}

// Ext1FieldLoggerMock is a mock implementation of logrus.Ext1FieldLogger.
//
//     func TestSomethingThatUsesExt1FieldLogger(t *testing.T) {
//
//         // make and configure a mocked logrus.Ext1FieldLogger
//         mockedExt1FieldLogger := &Ext1FieldLoggerMock{
//             DebugFunc: func(args ...interface{})  {
// 	               panic("mock out the Debug method")
//             },
//             DebugfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Debugf method")
//             },
//             DebuglnFunc: func(args ...interface{})  {
// 	               panic("mock out the Debugln method")
//             },
//             ErrorFunc: func(args ...interface{})  {
// 	               panic("mock out the Error method")
//             },
//             ErrorfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Errorf method")
//             },
//             ErrorlnFunc: func(args ...interface{})  {
// 	               panic("mock out the Errorln method")
//             },
//             FatalFunc: func(args ...interface{})  {
// 	               panic("mock out the Fatal method")
//             },
//             FatalfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Fatalf method")
//             },
//             FatallnFunc: func(args ...interface{})  {
// 	               panic("mock out the Fatalln method")
//             },
//             InfoFunc: func(args ...interface{})  {
// 	               panic("mock out the Info method")
//             },
//             InfofFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Infof method")
//             },
//             InfolnFunc: func(args ...interface{})  {
// 	               panic("mock out the Infoln method")
//             },
//             PanicFunc: func(args ...interface{})  {
// 	               panic("mock out the Panic method")
//             },
//             PanicfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Panicf method")
//             },
//             PaniclnFunc: func(args ...interface{})  {
// 	               panic("mock out the Panicln method")
//             },
//             PrintFunc: func(args ...interface{})  {
// 	               panic("mock out the Print method")
//             },
//             PrintfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Printf method")
//             },
//             PrintlnFunc: func(args ...interface{})  {
// 	               panic("mock out the Println method")
//             },
//             TraceFunc: func(args ...interface{})  {
// 	               panic("mock out the Trace method")
//             },
//             TracefFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Tracef method")
//             },
//             TracelnFunc: func(args ...interface{})  {
// 	               panic("mock out the Traceln method")
//             },
//             WarnFunc: func(args ...interface{})  {
// 	               panic("mock out the Warn method")
//             },
//             WarnfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Warnf method")
//             },
//             WarningFunc: func(args ...interface{})  {
// 	               panic("mock out the Warning method")
//             },
//             WarningfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Warningf method")
//             },
//             WarninglnFunc: func(args ...interface{})  {
// 	               panic("mock out the Warningln method")
//             },
//             WarnlnFunc: func(args ...interface{})  {
// 	               panic("mock out the Warnln method")
//             },
//             WithErrorFunc: func(err error) *logrus.Entry {
// 	               panic("mock out the WithError method")
//             },
//             WithFieldFunc: func(key string, value interface{}) *logrus.Entry {
// 	               panic("mock out the WithField method")
//             },
//             WithFieldsFunc: func(fields logrus.Fields) *logrus.Entry {
// 	               panic("mock out the WithFields method")
//             },
//         }
//
//         // use mockedExt1FieldLogger in code that requires logrus.Ext1FieldLogger
//         // and then make assertions.
//
//     }
type Ext1FieldLoggerMock struct {
	// DebugFunc mocks the Debug method.
	DebugFunc func(args ...interface{})

	// DebugfFunc mocks the Debugf method.
	DebugfFunc func(format string, args ...interface{})

	// DebuglnFunc mocks the Debugln method.
	DebuglnFunc func(args ...interface{})

	// ErrorFunc mocks the Error method.
	ErrorFunc func(args ...interface{})

	// ErrorfFunc mocks the Errorf method.
	ErrorfFunc func(format string, args ...interface{})

	// ErrorlnFunc mocks the Errorln method.
	ErrorlnFunc func(args ...interface{})

	// FatalFunc mocks the Fatal method.
	FatalFunc func(args ...interface{})

	// FatalfFunc mocks the Fatalf method.
	FatalfFunc func(format string, args ...interface{})

	// FatallnFunc mocks the Fatalln method.
	FatallnFunc func(args ...interface{})

	// InfoFunc mocks the Info method.
	InfoFunc func(args ...interface{})

	// InfofFunc mocks the Infof method.
	InfofFunc func(format string, args ...interface{})

	// InfolnFunc mocks the Infoln method.
	InfolnFunc func(args ...interface{})

	// PanicFunc mocks the Panic method.
	PanicFunc func(args ...interface{})

	// PanicfFunc mocks the Panicf method.
	PanicfFunc func(format string, args ...interface{})

	// PaniclnFunc mocks the Panicln method.
	PaniclnFunc func(args ...interface{})

	// PrintFunc mocks the Print method.
	PrintFunc func(args ...interface{})

	// PrintfFunc mocks the Printf method.
	PrintfFunc func(format string, args ...interface{})

	// PrintlnFunc mocks the Println method.
	PrintlnFunc func(args ...interface{})

	// TraceFunc mocks the Trace method.
	TraceFunc func(args ...interface{})

	// TracefFunc mocks the Tracef method.
	TracefFunc func(format string, args ...interface{})

	// TracelnFunc mocks the Traceln method.
	TracelnFunc func(args ...interface{})

	// WarnFunc mocks the Warn method.
	WarnFunc func(args ...interface{})

	// WarnfFunc mocks the Warnf method.
	WarnfFunc func(format string, args ...interface{})

	// WarningFunc mocks the Warning method.
	WarningFunc func(args ...interface{})

	// WarningfFunc mocks the Warningf method.
	WarningfFunc func(format string, args ...interface{})

	// WarninglnFunc mocks the Warningln method.
	WarninglnFunc func(args ...interface{})

	// WarnlnFunc mocks the Warnln method.
	WarnlnFunc func(args ...interface{})

	// WithErrorFunc mocks the WithError method.
	WithErrorFunc func(err error) *logrus.Entry

	// WithFieldFunc mocks the WithField method.
	WithFieldFunc func(key string, value interface{}) *logrus.Entry

	// WithFieldsFunc mocks the WithFields method.
	WithFieldsFunc func(fields logrus.Fields) *logrus.Entry

	// calls tracks calls to the methods.
	calls struct {
		// Debug holds details about calls to the Debug method.
		Debug []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Debugf holds details about calls to the Debugf method.
		Debugf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Debugln holds details about calls to the Debugln method.
		Debugln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Error holds details about calls to the Error method.
		Error []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Errorf holds details about calls to the Errorf method.
		Errorf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Errorln holds details about calls to the Errorln method.
		Errorln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Fatal holds details about calls to the Fatal method.
		Fatal []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Fatalf holds details about calls to the Fatalf method.
		Fatalf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Fatalln holds details about calls to the Fatalln method.
		Fatalln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Infof holds details about calls to the Infof method.
		Infof []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Infoln holds details about calls to the Infoln method.
		Infoln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Panic holds details about calls to the Panic method.
		Panic []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Panicf holds details about calls to the Panicf method.
		Panicf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Panicln holds details about calls to the Panicln method.
		Panicln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Print holds details about calls to the Print method.
		Print []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Printf holds details about calls to the Printf method.
		Printf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Println holds details about calls to the Println method.
		Println []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Trace holds details about calls to the Trace method.
		Trace []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Tracef holds details about calls to the Tracef method.
		Tracef []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Traceln holds details about calls to the Traceln method.
		Traceln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Warn holds details about calls to the Warn method.
		Warn []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Warnf holds details about calls to the Warnf method.
		Warnf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Warning holds details about calls to the Warning method.
		Warning []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Warningf holds details about calls to the Warningf method.
		Warningf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Warningln holds details about calls to the Warningln method.
		Warningln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Warnln holds details about calls to the Warnln method.
		Warnln []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// WithError holds details about calls to the WithError method.
		WithError []struct {
			// Err is the err argument value.
			Err error
		}
		// WithField holds details about calls to the WithField method.
		WithField []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value interface{}
		}
		// WithFields holds details about calls to the WithFields method.
		WithFields []struct {
			// Fields is the fields argument value.
			Fields logrus.Fields
		}
	}
}

// Debug calls DebugFunc.
func (mock *Ext1FieldLoggerMock) Debug(args ...interface{}) {
	if mock.DebugFunc == nil {
		panic("Ext1FieldLoggerMock.DebugFunc: method is nil but Ext1FieldLogger.Debug was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockDebug.Lock()
	mock.calls.Debug = append(mock.calls.Debug, callInfo)
	lockExt1FieldLoggerMockDebug.Unlock()
	mock.DebugFunc(args...)
}

// DebugCalls gets all the calls that were made to Debug.
// Check the length with:
//     len(mockedExt1FieldLogger.DebugCalls())
func (mock *Ext1FieldLoggerMock) DebugCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockDebug.RLock()
	calls = mock.calls.Debug
	lockExt1FieldLoggerMockDebug.RUnlock()
	return calls
}

// Debugf calls DebugfFunc.
func (mock *Ext1FieldLoggerMock) Debugf(format string, args ...interface{}) {
	if mock.DebugfFunc == nil {
		panic("Ext1FieldLoggerMock.DebugfFunc: method is nil but Ext1FieldLogger.Debugf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockDebugf.Lock()
	mock.calls.Debugf = append(mock.calls.Debugf, callInfo)
	lockExt1FieldLoggerMockDebugf.Unlock()
	mock.DebugfFunc(format, args...)
}

// DebugfCalls gets all the calls that were made to Debugf.
// Check the length with:
//     len(mockedExt1FieldLogger.DebugfCalls())
func (mock *Ext1FieldLoggerMock) DebugfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockDebugf.RLock()
	calls = mock.calls.Debugf
	lockExt1FieldLoggerMockDebugf.RUnlock()
	return calls
}

// Debugln calls DebuglnFunc.
func (mock *Ext1FieldLoggerMock) Debugln(args ...interface{}) {
	if mock.DebuglnFunc == nil {
		panic("Ext1FieldLoggerMock.DebuglnFunc: method is nil but Ext1FieldLogger.Debugln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockDebugln.Lock()
	mock.calls.Debugln = append(mock.calls.Debugln, callInfo)
	lockExt1FieldLoggerMockDebugln.Unlock()
	mock.DebuglnFunc(args...)
}

// DebuglnCalls gets all the calls that were made to Debugln.
// Check the length with:
//     len(mockedExt1FieldLogger.DebuglnCalls())
func (mock *Ext1FieldLoggerMock) DebuglnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockDebugln.RLock()
	calls = mock.calls.Debugln
	lockExt1FieldLoggerMockDebugln.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *Ext1FieldLoggerMock) Error(args ...interface{}) {
	if mock.ErrorFunc == nil {
		panic("Ext1FieldLoggerMock.ErrorFunc: method is nil but Ext1FieldLogger.Error was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	lockExt1FieldLoggerMockError.Unlock()
	mock.ErrorFunc(args...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//     len(mockedExt1FieldLogger.ErrorCalls())
func (mock *Ext1FieldLoggerMock) ErrorCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockError.RLock()
	calls = mock.calls.Error
	lockExt1FieldLoggerMockError.RUnlock()
	return calls
}

// Errorf calls ErrorfFunc.
func (mock *Ext1FieldLoggerMock) Errorf(format string, args ...interface{}) {
	if mock.ErrorfFunc == nil {
		panic("Ext1FieldLoggerMock.ErrorfFunc: method is nil but Ext1FieldLogger.Errorf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockErrorf.Lock()
	mock.calls.Errorf = append(mock.calls.Errorf, callInfo)
	lockExt1FieldLoggerMockErrorf.Unlock()
	mock.ErrorfFunc(format, args...)
}

// ErrorfCalls gets all the calls that were made to Errorf.
// Check the length with:
//     len(mockedExt1FieldLogger.ErrorfCalls())
func (mock *Ext1FieldLoggerMock) ErrorfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockErrorf.RLock()
	calls = mock.calls.Errorf
	lockExt1FieldLoggerMockErrorf.RUnlock()
	return calls
}

// Errorln calls ErrorlnFunc.
func (mock *Ext1FieldLoggerMock) Errorln(args ...interface{}) {
	if mock.ErrorlnFunc == nil {
		panic("Ext1FieldLoggerMock.ErrorlnFunc: method is nil but Ext1FieldLogger.Errorln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockErrorln.Lock()
	mock.calls.Errorln = append(mock.calls.Errorln, callInfo)
	lockExt1FieldLoggerMockErrorln.Unlock()
	mock.ErrorlnFunc(args...)
}

// ErrorlnCalls gets all the calls that were made to Errorln.
// Check the length with:
//     len(mockedExt1FieldLogger.ErrorlnCalls())
func (mock *Ext1FieldLoggerMock) ErrorlnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockErrorln.RLock()
	calls = mock.calls.Errorln
	lockExt1FieldLoggerMockErrorln.RUnlock()
	return calls
}

// Fatal calls FatalFunc.
func (mock *Ext1FieldLoggerMock) Fatal(args ...interface{}) {
	if mock.FatalFunc == nil {
		panic("Ext1FieldLoggerMock.FatalFunc: method is nil but Ext1FieldLogger.Fatal was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockFatal.Lock()
	mock.calls.Fatal = append(mock.calls.Fatal, callInfo)
	lockExt1FieldLoggerMockFatal.Unlock()
	mock.FatalFunc(args...)
}

// FatalCalls gets all the calls that were made to Fatal.
// Check the length with:
//     len(mockedExt1FieldLogger.FatalCalls())
func (mock *Ext1FieldLoggerMock) FatalCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockFatal.RLock()
	calls = mock.calls.Fatal
	lockExt1FieldLoggerMockFatal.RUnlock()
	return calls
}

// Fatalf calls FatalfFunc.
func (mock *Ext1FieldLoggerMock) Fatalf(format string, args ...interface{}) {
	if mock.FatalfFunc == nil {
		panic("Ext1FieldLoggerMock.FatalfFunc: method is nil but Ext1FieldLogger.Fatalf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockFatalf.Lock()
	mock.calls.Fatalf = append(mock.calls.Fatalf, callInfo)
	lockExt1FieldLoggerMockFatalf.Unlock()
	mock.FatalfFunc(format, args...)
}

// FatalfCalls gets all the calls that were made to Fatalf.
// Check the length with:
//     len(mockedExt1FieldLogger.FatalfCalls())
func (mock *Ext1FieldLoggerMock) FatalfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockFatalf.RLock()
	calls = mock.calls.Fatalf
	lockExt1FieldLoggerMockFatalf.RUnlock()
	return calls
}

// Fatalln calls FatallnFunc.
func (mock *Ext1FieldLoggerMock) Fatalln(args ...interface{}) {
	if mock.FatallnFunc == nil {
		panic("Ext1FieldLoggerMock.FatallnFunc: method is nil but Ext1FieldLogger.Fatalln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockFatalln.Lock()
	mock.calls.Fatalln = append(mock.calls.Fatalln, callInfo)
	lockExt1FieldLoggerMockFatalln.Unlock()
	mock.FatallnFunc(args...)
}

// FatallnCalls gets all the calls that were made to Fatalln.
// Check the length with:
//     len(mockedExt1FieldLogger.FatallnCalls())
func (mock *Ext1FieldLoggerMock) FatallnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockFatalln.RLock()
	calls = mock.calls.Fatalln
	lockExt1FieldLoggerMockFatalln.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *Ext1FieldLoggerMock) Info(args ...interface{}) {
	if mock.InfoFunc == nil {
		panic("Ext1FieldLoggerMock.InfoFunc: method is nil but Ext1FieldLogger.Info was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	lockExt1FieldLoggerMockInfo.Unlock()
	mock.InfoFunc(args...)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//     len(mockedExt1FieldLogger.InfoCalls())
func (mock *Ext1FieldLoggerMock) InfoCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockInfo.RLock()
	calls = mock.calls.Info
	lockExt1FieldLoggerMockInfo.RUnlock()
	return calls
}

// Infof calls InfofFunc.
func (mock *Ext1FieldLoggerMock) Infof(format string, args ...interface{}) {
	if mock.InfofFunc == nil {
		panic("Ext1FieldLoggerMock.InfofFunc: method is nil but Ext1FieldLogger.Infof was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockInfof.Lock()
	mock.calls.Infof = append(mock.calls.Infof, callInfo)
	lockExt1FieldLoggerMockInfof.Unlock()
	mock.InfofFunc(format, args...)
}

// InfofCalls gets all the calls that were made to Infof.
// Check the length with:
//     len(mockedExt1FieldLogger.InfofCalls())
func (mock *Ext1FieldLoggerMock) InfofCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockInfof.RLock()
	calls = mock.calls.Infof
	lockExt1FieldLoggerMockInfof.RUnlock()
	return calls
}

// Infoln calls InfolnFunc.
func (mock *Ext1FieldLoggerMock) Infoln(args ...interface{}) {
	if mock.InfolnFunc == nil {
		panic("Ext1FieldLoggerMock.InfolnFunc: method is nil but Ext1FieldLogger.Infoln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockInfoln.Lock()
	mock.calls.Infoln = append(mock.calls.Infoln, callInfo)
	lockExt1FieldLoggerMockInfoln.Unlock()
	mock.InfolnFunc(args...)
}

// InfolnCalls gets all the calls that were made to Infoln.
// Check the length with:
//     len(mockedExt1FieldLogger.InfolnCalls())
func (mock *Ext1FieldLoggerMock) InfolnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockInfoln.RLock()
	calls = mock.calls.Infoln
	lockExt1FieldLoggerMockInfoln.RUnlock()
	return calls
}

// Panic calls PanicFunc.
func (mock *Ext1FieldLoggerMock) Panic(args ...interface{}) {
	if mock.PanicFunc == nil {
		panic("Ext1FieldLoggerMock.PanicFunc: method is nil but Ext1FieldLogger.Panic was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockPanic.Lock()
	mock.calls.Panic = append(mock.calls.Panic, callInfo)
	lockExt1FieldLoggerMockPanic.Unlock()
	mock.PanicFunc(args...)
}

// PanicCalls gets all the calls that were made to Panic.
// Check the length with:
//     len(mockedExt1FieldLogger.PanicCalls())
func (mock *Ext1FieldLoggerMock) PanicCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockPanic.RLock()
	calls = mock.calls.Panic
	lockExt1FieldLoggerMockPanic.RUnlock()
	return calls
}

// Panicf calls PanicfFunc.
func (mock *Ext1FieldLoggerMock) Panicf(format string, args ...interface{}) {
	if mock.PanicfFunc == nil {
		panic("Ext1FieldLoggerMock.PanicfFunc: method is nil but Ext1FieldLogger.Panicf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockPanicf.Lock()
	mock.calls.Panicf = append(mock.calls.Panicf, callInfo)
	lockExt1FieldLoggerMockPanicf.Unlock()
	mock.PanicfFunc(format, args...)
}

// PanicfCalls gets all the calls that were made to Panicf.
// Check the length with:
//     len(mockedExt1FieldLogger.PanicfCalls())
func (mock *Ext1FieldLoggerMock) PanicfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockPanicf.RLock()
	calls = mock.calls.Panicf
	lockExt1FieldLoggerMockPanicf.RUnlock()
	return calls
}

// Panicln calls PaniclnFunc.
func (mock *Ext1FieldLoggerMock) Panicln(args ...interface{}) {
	if mock.PaniclnFunc == nil {
		panic("Ext1FieldLoggerMock.PaniclnFunc: method is nil but Ext1FieldLogger.Panicln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockPanicln.Lock()
	mock.calls.Panicln = append(mock.calls.Panicln, callInfo)
	lockExt1FieldLoggerMockPanicln.Unlock()
	mock.PaniclnFunc(args...)
}

// PaniclnCalls gets all the calls that were made to Panicln.
// Check the length with:
//     len(mockedExt1FieldLogger.PaniclnCalls())
func (mock *Ext1FieldLoggerMock) PaniclnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockPanicln.RLock()
	calls = mock.calls.Panicln
	lockExt1FieldLoggerMockPanicln.RUnlock()
	return calls
}

// Print calls PrintFunc.
func (mock *Ext1FieldLoggerMock) Print(args ...interface{}) {
	if mock.PrintFunc == nil {
		panic("Ext1FieldLoggerMock.PrintFunc: method is nil but Ext1FieldLogger.Print was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockPrint.Lock()
	mock.calls.Print = append(mock.calls.Print, callInfo)
	lockExt1FieldLoggerMockPrint.Unlock()
	mock.PrintFunc(args...)
}

// PrintCalls gets all the calls that were made to Print.
// Check the length with:
//     len(mockedExt1FieldLogger.PrintCalls())
func (mock *Ext1FieldLoggerMock) PrintCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockPrint.RLock()
	calls = mock.calls.Print
	lockExt1FieldLoggerMockPrint.RUnlock()
	return calls
}

// Printf calls PrintfFunc.
func (mock *Ext1FieldLoggerMock) Printf(format string, args ...interface{}) {
	if mock.PrintfFunc == nil {
		panic("Ext1FieldLoggerMock.PrintfFunc: method is nil but Ext1FieldLogger.Printf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockPrintf.Lock()
	mock.calls.Printf = append(mock.calls.Printf, callInfo)
	lockExt1FieldLoggerMockPrintf.Unlock()
	mock.PrintfFunc(format, args...)
}

// PrintfCalls gets all the calls that were made to Printf.
// Check the length with:
//     len(mockedExt1FieldLogger.PrintfCalls())
func (mock *Ext1FieldLoggerMock) PrintfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockPrintf.RLock()
	calls = mock.calls.Printf
	lockExt1FieldLoggerMockPrintf.RUnlock()
	return calls
}

// Println calls PrintlnFunc.
func (mock *Ext1FieldLoggerMock) Println(args ...interface{}) {
	if mock.PrintlnFunc == nil {
		panic("Ext1FieldLoggerMock.PrintlnFunc: method is nil but Ext1FieldLogger.Println was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockPrintln.Lock()
	mock.calls.Println = append(mock.calls.Println, callInfo)
	lockExt1FieldLoggerMockPrintln.Unlock()
	mock.PrintlnFunc(args...)
}

// PrintlnCalls gets all the calls that were made to Println.
// Check the length with:
//     len(mockedExt1FieldLogger.PrintlnCalls())
func (mock *Ext1FieldLoggerMock) PrintlnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockPrintln.RLock()
	calls = mock.calls.Println
	lockExt1FieldLoggerMockPrintln.RUnlock()
	return calls
}

// Trace calls TraceFunc.
func (mock *Ext1FieldLoggerMock) Trace(args ...interface{}) {
	if mock.TraceFunc == nil {
		panic("Ext1FieldLoggerMock.TraceFunc: method is nil but Ext1FieldLogger.Trace was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockTrace.Lock()
	mock.calls.Trace = append(mock.calls.Trace, callInfo)
	lockExt1FieldLoggerMockTrace.Unlock()
	mock.TraceFunc(args...)
}

// TraceCalls gets all the calls that were made to Trace.
// Check the length with:
//     len(mockedExt1FieldLogger.TraceCalls())
func (mock *Ext1FieldLoggerMock) TraceCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockTrace.RLock()
	calls = mock.calls.Trace
	lockExt1FieldLoggerMockTrace.RUnlock()
	return calls
}

// Tracef calls TracefFunc.
func (mock *Ext1FieldLoggerMock) Tracef(format string, args ...interface{}) {
	if mock.TracefFunc == nil {
		panic("Ext1FieldLoggerMock.TracefFunc: method is nil but Ext1FieldLogger.Tracef was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockTracef.Lock()
	mock.calls.Tracef = append(mock.calls.Tracef, callInfo)
	lockExt1FieldLoggerMockTracef.Unlock()
	mock.TracefFunc(format, args...)
}

// TracefCalls gets all the calls that were made to Tracef.
// Check the length with:
//     len(mockedExt1FieldLogger.TracefCalls())
func (mock *Ext1FieldLoggerMock) TracefCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockTracef.RLock()
	calls = mock.calls.Tracef
	lockExt1FieldLoggerMockTracef.RUnlock()
	return calls
}

// Traceln calls TracelnFunc.
func (mock *Ext1FieldLoggerMock) Traceln(args ...interface{}) {
	if mock.TracelnFunc == nil {
		panic("Ext1FieldLoggerMock.TracelnFunc: method is nil but Ext1FieldLogger.Traceln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockTraceln.Lock()
	mock.calls.Traceln = append(mock.calls.Traceln, callInfo)
	lockExt1FieldLoggerMockTraceln.Unlock()
	mock.TracelnFunc(args...)
}

// TracelnCalls gets all the calls that were made to Traceln.
// Check the length with:
//     len(mockedExt1FieldLogger.TracelnCalls())
func (mock *Ext1FieldLoggerMock) TracelnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockTraceln.RLock()
	calls = mock.calls.Traceln
	lockExt1FieldLoggerMockTraceln.RUnlock()
	return calls
}

// Warn calls WarnFunc.
func (mock *Ext1FieldLoggerMock) Warn(args ...interface{}) {
	if mock.WarnFunc == nil {
		panic("Ext1FieldLoggerMock.WarnFunc: method is nil but Ext1FieldLogger.Warn was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockWarn.Lock()
	mock.calls.Warn = append(mock.calls.Warn, callInfo)
	lockExt1FieldLoggerMockWarn.Unlock()
	mock.WarnFunc(args...)
}

// WarnCalls gets all the calls that were made to Warn.
// Check the length with:
//     len(mockedExt1FieldLogger.WarnCalls())
func (mock *Ext1FieldLoggerMock) WarnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockWarn.RLock()
	calls = mock.calls.Warn
	lockExt1FieldLoggerMockWarn.RUnlock()
	return calls
}

// Warnf calls WarnfFunc.
func (mock *Ext1FieldLoggerMock) Warnf(format string, args ...interface{}) {
	if mock.WarnfFunc == nil {
		panic("Ext1FieldLoggerMock.WarnfFunc: method is nil but Ext1FieldLogger.Warnf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockWarnf.Lock()
	mock.calls.Warnf = append(mock.calls.Warnf, callInfo)
	lockExt1FieldLoggerMockWarnf.Unlock()
	mock.WarnfFunc(format, args...)
}

// WarnfCalls gets all the calls that were made to Warnf.
// Check the length with:
//     len(mockedExt1FieldLogger.WarnfCalls())
func (mock *Ext1FieldLoggerMock) WarnfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockWarnf.RLock()
	calls = mock.calls.Warnf
	lockExt1FieldLoggerMockWarnf.RUnlock()
	return calls
}

// Warning calls WarningFunc.
func (mock *Ext1FieldLoggerMock) Warning(args ...interface{}) {
	if mock.WarningFunc == nil {
		panic("Ext1FieldLoggerMock.WarningFunc: method is nil but Ext1FieldLogger.Warning was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockWarning.Lock()
	mock.calls.Warning = append(mock.calls.Warning, callInfo)
	lockExt1FieldLoggerMockWarning.Unlock()
	mock.WarningFunc(args...)
}

// WarningCalls gets all the calls that were made to Warning.
// Check the length with:
//     len(mockedExt1FieldLogger.WarningCalls())
func (mock *Ext1FieldLoggerMock) WarningCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockWarning.RLock()
	calls = mock.calls.Warning
	lockExt1FieldLoggerMockWarning.RUnlock()
	return calls
}

// Warningf calls WarningfFunc.
func (mock *Ext1FieldLoggerMock) Warningf(format string, args ...interface{}) {
	if mock.WarningfFunc == nil {
		panic("Ext1FieldLoggerMock.WarningfFunc: method is nil but Ext1FieldLogger.Warningf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockExt1FieldLoggerMockWarningf.Lock()
	mock.calls.Warningf = append(mock.calls.Warningf, callInfo)
	lockExt1FieldLoggerMockWarningf.Unlock()
	mock.WarningfFunc(format, args...)
}

// WarningfCalls gets all the calls that were made to Warningf.
// Check the length with:
//     len(mockedExt1FieldLogger.WarningfCalls())
func (mock *Ext1FieldLoggerMock) WarningfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockExt1FieldLoggerMockWarningf.RLock()
	calls = mock.calls.Warningf
	lockExt1FieldLoggerMockWarningf.RUnlock()
	return calls
}

// Warningln calls WarninglnFunc.
func (mock *Ext1FieldLoggerMock) Warningln(args ...interface{}) {
	if mock.WarninglnFunc == nil {
		panic("Ext1FieldLoggerMock.WarninglnFunc: method is nil but Ext1FieldLogger.Warningln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockWarningln.Lock()
	mock.calls.Warningln = append(mock.calls.Warningln, callInfo)
	lockExt1FieldLoggerMockWarningln.Unlock()
	mock.WarninglnFunc(args...)
}

// WarninglnCalls gets all the calls that were made to Warningln.
// Check the length with:
//     len(mockedExt1FieldLogger.WarninglnCalls())
func (mock *Ext1FieldLoggerMock) WarninglnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockWarningln.RLock()
	calls = mock.calls.Warningln
	lockExt1FieldLoggerMockWarningln.RUnlock()
	return calls
}

// Warnln calls WarnlnFunc.
func (mock *Ext1FieldLoggerMock) Warnln(args ...interface{}) {
	if mock.WarnlnFunc == nil {
		panic("Ext1FieldLoggerMock.WarnlnFunc: method is nil but Ext1FieldLogger.Warnln was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockExt1FieldLoggerMockWarnln.Lock()
	mock.calls.Warnln = append(mock.calls.Warnln, callInfo)
	lockExt1FieldLoggerMockWarnln.Unlock()
	mock.WarnlnFunc(args...)
}

// WarnlnCalls gets all the calls that were made to Warnln.
// Check the length with:
//     len(mockedExt1FieldLogger.WarnlnCalls())
func (mock *Ext1FieldLoggerMock) WarnlnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockExt1FieldLoggerMockWarnln.RLock()
	calls = mock.calls.Warnln
	lockExt1FieldLoggerMockWarnln.RUnlock()
	return calls
}

// WithError calls WithErrorFunc.
func (mock *Ext1FieldLoggerMock) WithError(err error) *logrus.Entry {
	if mock.WithErrorFunc == nil {
		panic("Ext1FieldLoggerMock.WithErrorFunc: method is nil but Ext1FieldLogger.WithError was just called")
	}
	callInfo := struct {
		Err error
	}{
		Err: err,
	}
	lockExt1FieldLoggerMockWithError.Lock()
	mock.calls.WithError = append(mock.calls.WithError, callInfo)
	lockExt1FieldLoggerMockWithError.Unlock()
	return mock.WithErrorFunc(err)
}

// WithErrorCalls gets all the calls that were made to WithError.
// Check the length with:
//     len(mockedExt1FieldLogger.WithErrorCalls())
func (mock *Ext1FieldLoggerMock) WithErrorCalls() []struct {
	Err error
} {
	var calls []struct {
		Err error
	}
	lockExt1FieldLoggerMockWithError.RLock()
	calls = mock.calls.WithError
	lockExt1FieldLoggerMockWithError.RUnlock()
	return calls
}

// WithField calls WithFieldFunc.
func (mock *Ext1FieldLoggerMock) WithField(key string, value interface{}) *logrus.Entry {
	if mock.WithFieldFunc == nil {
		panic("Ext1FieldLoggerMock.WithFieldFunc: method is nil but Ext1FieldLogger.WithField was just called")
	}
	callInfo := struct {
		Key   string
		Value interface{}
	}{
		Key:   key,
		Value: value,
	}
	lockExt1FieldLoggerMockWithField.Lock()
	mock.calls.WithField = append(mock.calls.WithField, callInfo)
	lockExt1FieldLoggerMockWithField.Unlock()
	return mock.WithFieldFunc(key, value)
}

// WithFieldCalls gets all the calls that were made to WithField.
// Check the length with:
//     len(mockedExt1FieldLogger.WithFieldCalls())
func (mock *Ext1FieldLoggerMock) WithFieldCalls() []struct {
	Key   string
	Value interface{}
} {
	var calls []struct {
		Key   string
		Value interface{}
	}
	lockExt1FieldLoggerMockWithField.RLock()
	calls = mock.calls.WithField
	lockExt1FieldLoggerMockWithField.RUnlock()
	return calls
}

// WithFields calls WithFieldsFunc.
func (mock *Ext1FieldLoggerMock) WithFields(fields logrus.Fields) *logrus.Entry {
	if mock.WithFieldsFunc == nil {
		panic("Ext1FieldLoggerMock.WithFieldsFunc: method is nil but Ext1FieldLogger.WithFields was just called")
	}
	callInfo := struct {
		Fields logrus.Fields
	}{
		Fields: fields,
	}
	lockExt1FieldLoggerMockWithFields.Lock()
	mock.calls.WithFields = append(mock.calls.WithFields, callInfo)
	lockExt1FieldLoggerMockWithFields.Unlock()
	return mock.WithFieldsFunc(fields)
}

// WithFieldsCalls gets all the calls that were made to WithFields.
// Check the length with:
//     len(mockedExt1FieldLogger.WithFieldsCalls())
func (mock *Ext1FieldLoggerMock) WithFieldsCalls() []struct {
	Fields logrus.Fields
} {
	var calls []struct {
		Fields logrus.Fields
	}
	lockExt1FieldLoggerMockWithFields.RLock()
	calls = mock.calls.WithFields
	lockExt1FieldLoggerMockWithFields.RUnlock()
	return calls
}

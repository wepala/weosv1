// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain_test

import (
	"github.com/wepala/weos/domain"
	"sync"
)

var (
	lockEventRepositoryMockGetByAggregate                 sync.RWMutex
	lockEventRepositoryMockGetByAggregateAndSequenceRange sync.RWMutex
	lockEventRepositoryMockSave                           sync.RWMutex
)

// Ensure, that EventRepositoryMock does implement domain.EventRepository.
// If this is not the case, regenerate this file with moq.
var _ domain.EventRepository = &EventRepositoryMock{}

// EventRepositoryMock is a mock implementation of domain.EventRepository.
//
//     func TestSomethingThatUsesEventRepository(t *testing.T) {
//
//         // make and configure a mocked domain.EventRepository
//         mockedEventRepository := &EventRepositoryMock{
//             GetByAggregateFunc: func(ID string) []*domain.Event {
// 	               panic("mock out the GetByAggregate method")
//             },
//             GetByAggregateAndSequenceRangeFunc: func(ID string, start int64, end int64) []*domain.Event {
// 	               panic("mock out the GetByAggregateAndSequenceRange method")
//             },
//             SaveFunc: func(in1 []*domain.Event) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedEventRepository in code that requires domain.EventRepository
//         // and then make assertions.
//
//     }
type EventRepositoryMock struct {
	// GetByAggregateFunc mocks the GetByAggregate method.
	GetByAggregateFunc func(ID string) []*domain.Event

	// GetByAggregateAndSequenceRangeFunc mocks the GetByAggregateAndSequenceRange method.
	GetByAggregateAndSequenceRangeFunc func(ID string, start int64, end int64) []*domain.Event

	// SaveFunc mocks the Save method.
	SaveFunc func(in1 []*domain.Event) error

	// calls tracks calls to the methods.
	calls struct {
		// GetByAggregate holds details about calls to the GetByAggregate method.
		GetByAggregate []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetByAggregateAndSequenceRange holds details about calls to the GetByAggregateAndSequenceRange method.
		GetByAggregateAndSequenceRange []struct {
			// ID is the ID argument value.
			ID string
			// Start is the start argument value.
			Start int64
			// End is the end argument value.
			End int64
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// In1 is the in1 argument value.
			In1 []*domain.Event
		}
	}
}

// GetByAggregate calls GetByAggregateFunc.
func (mock *EventRepositoryMock) GetByAggregate(ID string) []*domain.Event {
	if mock.GetByAggregateFunc == nil {
		panic("EventRepositoryMock.GetByAggregateFunc: method is nil but EventRepository.GetByAggregate was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockEventRepositoryMockGetByAggregate.Lock()
	mock.calls.GetByAggregate = append(mock.calls.GetByAggregate, callInfo)
	lockEventRepositoryMockGetByAggregate.Unlock()
	return mock.GetByAggregateFunc(ID)
}

// GetByAggregateCalls gets all the calls that were made to GetByAggregate.
// Check the length with:
//     len(mockedEventRepository.GetByAggregateCalls())
func (mock *EventRepositoryMock) GetByAggregateCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockEventRepositoryMockGetByAggregate.RLock()
	calls = mock.calls.GetByAggregate
	lockEventRepositoryMockGetByAggregate.RUnlock()
	return calls
}

// GetByAggregateAndSequenceRange calls GetByAggregateAndSequenceRangeFunc.
func (mock *EventRepositoryMock) GetByAggregateAndSequenceRange(ID string, start int64, end int64) []*domain.Event {
	if mock.GetByAggregateAndSequenceRangeFunc == nil {
		panic("EventRepositoryMock.GetByAggregateAndSequenceRangeFunc: method is nil but EventRepository.GetByAggregateAndSequenceRange was just called")
	}
	callInfo := struct {
		ID    string
		Start int64
		End   int64
	}{
		ID:    ID,
		Start: start,
		End:   end,
	}
	lockEventRepositoryMockGetByAggregateAndSequenceRange.Lock()
	mock.calls.GetByAggregateAndSequenceRange = append(mock.calls.GetByAggregateAndSequenceRange, callInfo)
	lockEventRepositoryMockGetByAggregateAndSequenceRange.Unlock()
	return mock.GetByAggregateAndSequenceRangeFunc(ID, start, end)
}

// GetByAggregateAndSequenceRangeCalls gets all the calls that were made to GetByAggregateAndSequenceRange.
// Check the length with:
//     len(mockedEventRepository.GetByAggregateAndSequenceRangeCalls())
func (mock *EventRepositoryMock) GetByAggregateAndSequenceRangeCalls() []struct {
	ID    string
	Start int64
	End   int64
} {
	var calls []struct {
		ID    string
		Start int64
		End   int64
	}
	lockEventRepositoryMockGetByAggregateAndSequenceRange.RLock()
	calls = mock.calls.GetByAggregateAndSequenceRange
	lockEventRepositoryMockGetByAggregateAndSequenceRange.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *EventRepositoryMock) Save(in1 []*domain.Event) error {
	if mock.SaveFunc == nil {
		panic("EventRepositoryMock.SaveFunc: method is nil but EventRepository.Save was just called")
	}
	callInfo := struct {
		In1 []*domain.Event
	}{
		In1: in1,
	}
	lockEventRepositoryMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockEventRepositoryMockSave.Unlock()
	return mock.SaveFunc(in1)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedEventRepository.SaveCalls())
func (mock *EventRepositoryMock) SaveCalls() []struct {
	In1 []*domain.Event
} {
	var calls []struct {
		In1 []*domain.Event
	}
	lockEventRepositoryMockSave.RLock()
	calls = mock.calls.Save
	lockEventRepositoryMockSave.RUnlock()
	return calls
}

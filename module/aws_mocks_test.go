// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package module_test

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/aws/aws-sdk-go/service/sqs/sqsiface"
	"sync"
)

// Ensure, that SQSAPIMock does implement sqsiface.SQSAPI.
// If this is not the case, regenerate this file with moq.
var _ sqsiface.SQSAPI = &SQSAPIMock{}

// SQSAPIMock is a mock implementation of sqsiface.SQSAPI.
//
// 	func TestSomethingThatUsesSQSAPI(t *testing.T) {
//
// 		// make and configure a mocked sqsiface.SQSAPI
// 		mockedSQSAPI := &SQSAPIMock{
// 			AddPermissionFunc: func(addPermissionInput *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error) {
// 				panic("mock out the AddPermission method")
// 			},
// 			AddPermissionRequestFunc: func(addPermissionInput *sqs.AddPermissionInput) (*request.Request, *sqs.AddPermissionOutput) {
// 				panic("mock out the AddPermissionRequest method")
// 			},
// 			AddPermissionWithContextFunc: func(contextMoqParam context.Context, addPermissionInput *sqs.AddPermissionInput, options ...request.Option) (*sqs.AddPermissionOutput, error) {
// 				panic("mock out the AddPermissionWithContext method")
// 			},
// 			ChangeMessageVisibilityFunc: func(changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error) {
// 				panic("mock out the ChangeMessageVisibility method")
// 			},
// 			ChangeMessageVisibilityBatchFunc: func(changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
// 				panic("mock out the ChangeMessageVisibilityBatch method")
// 			},
// 			ChangeMessageVisibilityBatchRequestFunc: func(changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput) (*request.Request, *sqs.ChangeMessageVisibilityBatchOutput) {
// 				panic("mock out the ChangeMessageVisibilityBatchRequest method")
// 			},
// 			ChangeMessageVisibilityBatchWithContextFunc: func(contextMoqParam context.Context, changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput, options ...request.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
// 				panic("mock out the ChangeMessageVisibilityBatchWithContext method")
// 			},
// 			ChangeMessageVisibilityRequestFunc: func(changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput) (*request.Request, *sqs.ChangeMessageVisibilityOutput) {
// 				panic("mock out the ChangeMessageVisibilityRequest method")
// 			},
// 			ChangeMessageVisibilityWithContextFunc: func(contextMoqParam context.Context, changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput, options ...request.Option) (*sqs.ChangeMessageVisibilityOutput, error) {
// 				panic("mock out the ChangeMessageVisibilityWithContext method")
// 			},
// 			CreateQueueFunc: func(createQueueInput *sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error) {
// 				panic("mock out the CreateQueue method")
// 			},
// 			CreateQueueRequestFunc: func(createQueueInput *sqs.CreateQueueInput) (*request.Request, *sqs.CreateQueueOutput) {
// 				panic("mock out the CreateQueueRequest method")
// 			},
// 			CreateQueueWithContextFunc: func(contextMoqParam context.Context, createQueueInput *sqs.CreateQueueInput, options ...request.Option) (*sqs.CreateQueueOutput, error) {
// 				panic("mock out the CreateQueueWithContext method")
// 			},
// 			DeleteMessageFunc: func(deleteMessageInput *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
// 				panic("mock out the DeleteMessage method")
// 			},
// 			DeleteMessageBatchFunc: func(deleteMessageBatchInput *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error) {
// 				panic("mock out the DeleteMessageBatch method")
// 			},
// 			DeleteMessageBatchRequestFunc: func(deleteMessageBatchInput *sqs.DeleteMessageBatchInput) (*request.Request, *sqs.DeleteMessageBatchOutput) {
// 				panic("mock out the DeleteMessageBatchRequest method")
// 			},
// 			DeleteMessageBatchWithContextFunc: func(contextMoqParam context.Context, deleteMessageBatchInput *sqs.DeleteMessageBatchInput, options ...request.Option) (*sqs.DeleteMessageBatchOutput, error) {
// 				panic("mock out the DeleteMessageBatchWithContext method")
// 			},
// 			DeleteMessageRequestFunc: func(deleteMessageInput *sqs.DeleteMessageInput) (*request.Request, *sqs.DeleteMessageOutput) {
// 				panic("mock out the DeleteMessageRequest method")
// 			},
// 			DeleteMessageWithContextFunc: func(contextMoqParam context.Context, deleteMessageInput *sqs.DeleteMessageInput, options ...request.Option) (*sqs.DeleteMessageOutput, error) {
// 				panic("mock out the DeleteMessageWithContext method")
// 			},
// 			DeleteQueueFunc: func(deleteQueueInput *sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error) {
// 				panic("mock out the DeleteQueue method")
// 			},
// 			DeleteQueueRequestFunc: func(deleteQueueInput *sqs.DeleteQueueInput) (*request.Request, *sqs.DeleteQueueOutput) {
// 				panic("mock out the DeleteQueueRequest method")
// 			},
// 			DeleteQueueWithContextFunc: func(contextMoqParam context.Context, deleteQueueInput *sqs.DeleteQueueInput, options ...request.Option) (*sqs.DeleteQueueOutput, error) {
// 				panic("mock out the DeleteQueueWithContext method")
// 			},
// 			GetQueueAttributesFunc: func(getQueueAttributesInput *sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error) {
// 				panic("mock out the GetQueueAttributes method")
// 			},
// 			GetQueueAttributesRequestFunc: func(getQueueAttributesInput *sqs.GetQueueAttributesInput) (*request.Request, *sqs.GetQueueAttributesOutput) {
// 				panic("mock out the GetQueueAttributesRequest method")
// 			},
// 			GetQueueAttributesWithContextFunc: func(contextMoqParam context.Context, getQueueAttributesInput *sqs.GetQueueAttributesInput, options ...request.Option) (*sqs.GetQueueAttributesOutput, error) {
// 				panic("mock out the GetQueueAttributesWithContext method")
// 			},
// 			GetQueueUrlFunc: func(getQueueUrlInput *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {
// 				panic("mock out the GetQueueUrl method")
// 			},
// 			GetQueueUrlRequestFunc: func(getQueueUrlInput *sqs.GetQueueUrlInput) (*request.Request, *sqs.GetQueueUrlOutput) {
// 				panic("mock out the GetQueueUrlRequest method")
// 			},
// 			GetQueueUrlWithContextFunc: func(contextMoqParam context.Context, getQueueUrlInput *sqs.GetQueueUrlInput, options ...request.Option) (*sqs.GetQueueUrlOutput, error) {
// 				panic("mock out the GetQueueUrlWithContext method")
// 			},
// 			ListDeadLetterSourceQueuesFunc: func(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
// 				panic("mock out the ListDeadLetterSourceQueues method")
// 			},
// 			ListDeadLetterSourceQueuesPagesFunc: func(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool) error {
// 				panic("mock out the ListDeadLetterSourceQueuesPages method")
// 			},
// 			ListDeadLetterSourceQueuesPagesWithContextFunc: func(contextMoqParam context.Context, listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListDeadLetterSourceQueuesPagesWithContext method")
// 			},
// 			ListDeadLetterSourceQueuesRequestFunc: func(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput) (*request.Request, *sqs.ListDeadLetterSourceQueuesOutput) {
// 				panic("mock out the ListDeadLetterSourceQueuesRequest method")
// 			},
// 			ListDeadLetterSourceQueuesWithContextFunc: func(contextMoqParam context.Context, listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, options ...request.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
// 				panic("mock out the ListDeadLetterSourceQueuesWithContext method")
// 			},
// 			ListQueueTagsFunc: func(listQueueTagsInput *sqs.ListQueueTagsInput) (*sqs.ListQueueTagsOutput, error) {
// 				panic("mock out the ListQueueTags method")
// 			},
// 			ListQueueTagsRequestFunc: func(listQueueTagsInput *sqs.ListQueueTagsInput) (*request.Request, *sqs.ListQueueTagsOutput) {
// 				panic("mock out the ListQueueTagsRequest method")
// 			},
// 			ListQueueTagsWithContextFunc: func(contextMoqParam context.Context, listQueueTagsInput *sqs.ListQueueTagsInput, options ...request.Option) (*sqs.ListQueueTagsOutput, error) {
// 				panic("mock out the ListQueueTagsWithContext method")
// 			},
// 			ListQueuesFunc: func(listQueuesInput *sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error) {
// 				panic("mock out the ListQueues method")
// 			},
// 			ListQueuesPagesFunc: func(listQueuesInput *sqs.ListQueuesInput, fn func(*sqs.ListQueuesOutput, bool) bool) error {
// 				panic("mock out the ListQueuesPages method")
// 			},
// 			ListQueuesPagesWithContextFunc: func(contextMoqParam context.Context, listQueuesInput *sqs.ListQueuesInput, fn func(*sqs.ListQueuesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListQueuesPagesWithContext method")
// 			},
// 			ListQueuesRequestFunc: func(listQueuesInput *sqs.ListQueuesInput) (*request.Request, *sqs.ListQueuesOutput) {
// 				panic("mock out the ListQueuesRequest method")
// 			},
// 			ListQueuesWithContextFunc: func(contextMoqParam context.Context, listQueuesInput *sqs.ListQueuesInput, options ...request.Option) (*sqs.ListQueuesOutput, error) {
// 				panic("mock out the ListQueuesWithContext method")
// 			},
// 			PurgeQueueFunc: func(purgeQueueInput *sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error) {
// 				panic("mock out the PurgeQueue method")
// 			},
// 			PurgeQueueRequestFunc: func(purgeQueueInput *sqs.PurgeQueueInput) (*request.Request, *sqs.PurgeQueueOutput) {
// 				panic("mock out the PurgeQueueRequest method")
// 			},
// 			PurgeQueueWithContextFunc: func(contextMoqParam context.Context, purgeQueueInput *sqs.PurgeQueueInput, options ...request.Option) (*sqs.PurgeQueueOutput, error) {
// 				panic("mock out the PurgeQueueWithContext method")
// 			},
// 			ReceiveMessageFunc: func(receiveMessageInput *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
// 				panic("mock out the ReceiveMessage method")
// 			},
// 			ReceiveMessageRequestFunc: func(receiveMessageInput *sqs.ReceiveMessageInput) (*request.Request, *sqs.ReceiveMessageOutput) {
// 				panic("mock out the ReceiveMessageRequest method")
// 			},
// 			ReceiveMessageWithContextFunc: func(contextMoqParam context.Context, receiveMessageInput *sqs.ReceiveMessageInput, options ...request.Option) (*sqs.ReceiveMessageOutput, error) {
// 				panic("mock out the ReceiveMessageWithContext method")
// 			},
// 			RemovePermissionFunc: func(removePermissionInput *sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error) {
// 				panic("mock out the RemovePermission method")
// 			},
// 			RemovePermissionRequestFunc: func(removePermissionInput *sqs.RemovePermissionInput) (*request.Request, *sqs.RemovePermissionOutput) {
// 				panic("mock out the RemovePermissionRequest method")
// 			},
// 			RemovePermissionWithContextFunc: func(contextMoqParam context.Context, removePermissionInput *sqs.RemovePermissionInput, options ...request.Option) (*sqs.RemovePermissionOutput, error) {
// 				panic("mock out the RemovePermissionWithContext method")
// 			},
// 			SendMessageFunc: func(sendMessageInput *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
// 				panic("mock out the SendMessage method")
// 			},
// 			SendMessageBatchFunc: func(sendMessageBatchInput *sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error) {
// 				panic("mock out the SendMessageBatch method")
// 			},
// 			SendMessageBatchRequestFunc: func(sendMessageBatchInput *sqs.SendMessageBatchInput) (*request.Request, *sqs.SendMessageBatchOutput) {
// 				panic("mock out the SendMessageBatchRequest method")
// 			},
// 			SendMessageBatchWithContextFunc: func(contextMoqParam context.Context, sendMessageBatchInput *sqs.SendMessageBatchInput, options ...request.Option) (*sqs.SendMessageBatchOutput, error) {
// 				panic("mock out the SendMessageBatchWithContext method")
// 			},
// 			SendMessageRequestFunc: func(sendMessageInput *sqs.SendMessageInput) (*request.Request, *sqs.SendMessageOutput) {
// 				panic("mock out the SendMessageRequest method")
// 			},
// 			SendMessageWithContextFunc: func(contextMoqParam context.Context, sendMessageInput *sqs.SendMessageInput, options ...request.Option) (*sqs.SendMessageOutput, error) {
// 				panic("mock out the SendMessageWithContext method")
// 			},
// 			SetQueueAttributesFunc: func(setQueueAttributesInput *sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error) {
// 				panic("mock out the SetQueueAttributes method")
// 			},
// 			SetQueueAttributesRequestFunc: func(setQueueAttributesInput *sqs.SetQueueAttributesInput) (*request.Request, *sqs.SetQueueAttributesOutput) {
// 				panic("mock out the SetQueueAttributesRequest method")
// 			},
// 			SetQueueAttributesWithContextFunc: func(contextMoqParam context.Context, setQueueAttributesInput *sqs.SetQueueAttributesInput, options ...request.Option) (*sqs.SetQueueAttributesOutput, error) {
// 				panic("mock out the SetQueueAttributesWithContext method")
// 			},
// 			TagQueueFunc: func(tagQueueInput *sqs.TagQueueInput) (*sqs.TagQueueOutput, error) {
// 				panic("mock out the TagQueue method")
// 			},
// 			TagQueueRequestFunc: func(tagQueueInput *sqs.TagQueueInput) (*request.Request, *sqs.TagQueueOutput) {
// 				panic("mock out the TagQueueRequest method")
// 			},
// 			TagQueueWithContextFunc: func(contextMoqParam context.Context, tagQueueInput *sqs.TagQueueInput, options ...request.Option) (*sqs.TagQueueOutput, error) {
// 				panic("mock out the TagQueueWithContext method")
// 			},
// 			UntagQueueFunc: func(untagQueueInput *sqs.UntagQueueInput) (*sqs.UntagQueueOutput, error) {
// 				panic("mock out the UntagQueue method")
// 			},
// 			UntagQueueRequestFunc: func(untagQueueInput *sqs.UntagQueueInput) (*request.Request, *sqs.UntagQueueOutput) {
// 				panic("mock out the UntagQueueRequest method")
// 			},
// 			UntagQueueWithContextFunc: func(contextMoqParam context.Context, untagQueueInput *sqs.UntagQueueInput, options ...request.Option) (*sqs.UntagQueueOutput, error) {
// 				panic("mock out the UntagQueueWithContext method")
// 			},
// 		}
//
// 		// use mockedSQSAPI in code that requires sqsiface.SQSAPI
// 		// and then make assertions.
//
// 	}
type SQSAPIMock struct {
	// AddPermissionFunc mocks the AddPermission method.
	AddPermissionFunc func(addPermissionInput *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error)

	// AddPermissionRequestFunc mocks the AddPermissionRequest method.
	AddPermissionRequestFunc func(addPermissionInput *sqs.AddPermissionInput) (*request.Request, *sqs.AddPermissionOutput)

	// AddPermissionWithContextFunc mocks the AddPermissionWithContext method.
	AddPermissionWithContextFunc func(contextMoqParam context.Context, addPermissionInput *sqs.AddPermissionInput, options ...request.Option) (*sqs.AddPermissionOutput, error)

	// ChangeMessageVisibilityFunc mocks the ChangeMessageVisibility method.
	ChangeMessageVisibilityFunc func(changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error)

	// ChangeMessageVisibilityBatchFunc mocks the ChangeMessageVisibilityBatch method.
	ChangeMessageVisibilityBatchFunc func(changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error)

	// ChangeMessageVisibilityBatchRequestFunc mocks the ChangeMessageVisibilityBatchRequest method.
	ChangeMessageVisibilityBatchRequestFunc func(changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput) (*request.Request, *sqs.ChangeMessageVisibilityBatchOutput)

	// ChangeMessageVisibilityBatchWithContextFunc mocks the ChangeMessageVisibilityBatchWithContext method.
	ChangeMessageVisibilityBatchWithContextFunc func(contextMoqParam context.Context, changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput, options ...request.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error)

	// ChangeMessageVisibilityRequestFunc mocks the ChangeMessageVisibilityRequest method.
	ChangeMessageVisibilityRequestFunc func(changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput) (*request.Request, *sqs.ChangeMessageVisibilityOutput)

	// ChangeMessageVisibilityWithContextFunc mocks the ChangeMessageVisibilityWithContext method.
	ChangeMessageVisibilityWithContextFunc func(contextMoqParam context.Context, changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput, options ...request.Option) (*sqs.ChangeMessageVisibilityOutput, error)

	// CreateQueueFunc mocks the CreateQueue method.
	CreateQueueFunc func(createQueueInput *sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error)

	// CreateQueueRequestFunc mocks the CreateQueueRequest method.
	CreateQueueRequestFunc func(createQueueInput *sqs.CreateQueueInput) (*request.Request, *sqs.CreateQueueOutput)

	// CreateQueueWithContextFunc mocks the CreateQueueWithContext method.
	CreateQueueWithContextFunc func(contextMoqParam context.Context, createQueueInput *sqs.CreateQueueInput, options ...request.Option) (*sqs.CreateQueueOutput, error)

	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(deleteMessageInput *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error)

	// DeleteMessageBatchFunc mocks the DeleteMessageBatch method.
	DeleteMessageBatchFunc func(deleteMessageBatchInput *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error)

	// DeleteMessageBatchRequestFunc mocks the DeleteMessageBatchRequest method.
	DeleteMessageBatchRequestFunc func(deleteMessageBatchInput *sqs.DeleteMessageBatchInput) (*request.Request, *sqs.DeleteMessageBatchOutput)

	// DeleteMessageBatchWithContextFunc mocks the DeleteMessageBatchWithContext method.
	DeleteMessageBatchWithContextFunc func(contextMoqParam context.Context, deleteMessageBatchInput *sqs.DeleteMessageBatchInput, options ...request.Option) (*sqs.DeleteMessageBatchOutput, error)

	// DeleteMessageRequestFunc mocks the DeleteMessageRequest method.
	DeleteMessageRequestFunc func(deleteMessageInput *sqs.DeleteMessageInput) (*request.Request, *sqs.DeleteMessageOutput)

	// DeleteMessageWithContextFunc mocks the DeleteMessageWithContext method.
	DeleteMessageWithContextFunc func(contextMoqParam context.Context, deleteMessageInput *sqs.DeleteMessageInput, options ...request.Option) (*sqs.DeleteMessageOutput, error)

	// DeleteQueueFunc mocks the DeleteQueue method.
	DeleteQueueFunc func(deleteQueueInput *sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error)

	// DeleteQueueRequestFunc mocks the DeleteQueueRequest method.
	DeleteQueueRequestFunc func(deleteQueueInput *sqs.DeleteQueueInput) (*request.Request, *sqs.DeleteQueueOutput)

	// DeleteQueueWithContextFunc mocks the DeleteQueueWithContext method.
	DeleteQueueWithContextFunc func(contextMoqParam context.Context, deleteQueueInput *sqs.DeleteQueueInput, options ...request.Option) (*sqs.DeleteQueueOutput, error)

	// GetQueueAttributesFunc mocks the GetQueueAttributes method.
	GetQueueAttributesFunc func(getQueueAttributesInput *sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error)

	// GetQueueAttributesRequestFunc mocks the GetQueueAttributesRequest method.
	GetQueueAttributesRequestFunc func(getQueueAttributesInput *sqs.GetQueueAttributesInput) (*request.Request, *sqs.GetQueueAttributesOutput)

	// GetQueueAttributesWithContextFunc mocks the GetQueueAttributesWithContext method.
	GetQueueAttributesWithContextFunc func(contextMoqParam context.Context, getQueueAttributesInput *sqs.GetQueueAttributesInput, options ...request.Option) (*sqs.GetQueueAttributesOutput, error)

	// GetQueueUrlFunc mocks the GetQueueUrl method.
	GetQueueUrlFunc func(getQueueUrlInput *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error)

	// GetQueueUrlRequestFunc mocks the GetQueueUrlRequest method.
	GetQueueUrlRequestFunc func(getQueueUrlInput *sqs.GetQueueUrlInput) (*request.Request, *sqs.GetQueueUrlOutput)

	// GetQueueUrlWithContextFunc mocks the GetQueueUrlWithContext method.
	GetQueueUrlWithContextFunc func(contextMoqParam context.Context, getQueueUrlInput *sqs.GetQueueUrlInput, options ...request.Option) (*sqs.GetQueueUrlOutput, error)

	// ListDeadLetterSourceQueuesFunc mocks the ListDeadLetterSourceQueues method.
	ListDeadLetterSourceQueuesFunc func(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error)

	// ListDeadLetterSourceQueuesPagesFunc mocks the ListDeadLetterSourceQueuesPages method.
	ListDeadLetterSourceQueuesPagesFunc func(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool) error

	// ListDeadLetterSourceQueuesPagesWithContextFunc mocks the ListDeadLetterSourceQueuesPagesWithContext method.
	ListDeadLetterSourceQueuesPagesWithContextFunc func(contextMoqParam context.Context, listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool, options ...request.Option) error

	// ListDeadLetterSourceQueuesRequestFunc mocks the ListDeadLetterSourceQueuesRequest method.
	ListDeadLetterSourceQueuesRequestFunc func(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput) (*request.Request, *sqs.ListDeadLetterSourceQueuesOutput)

	// ListDeadLetterSourceQueuesWithContextFunc mocks the ListDeadLetterSourceQueuesWithContext method.
	ListDeadLetterSourceQueuesWithContextFunc func(contextMoqParam context.Context, listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, options ...request.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error)

	// ListQueueTagsFunc mocks the ListQueueTags method.
	ListQueueTagsFunc func(listQueueTagsInput *sqs.ListQueueTagsInput) (*sqs.ListQueueTagsOutput, error)

	// ListQueueTagsRequestFunc mocks the ListQueueTagsRequest method.
	ListQueueTagsRequestFunc func(listQueueTagsInput *sqs.ListQueueTagsInput) (*request.Request, *sqs.ListQueueTagsOutput)

	// ListQueueTagsWithContextFunc mocks the ListQueueTagsWithContext method.
	ListQueueTagsWithContextFunc func(contextMoqParam context.Context, listQueueTagsInput *sqs.ListQueueTagsInput, options ...request.Option) (*sqs.ListQueueTagsOutput, error)

	// ListQueuesFunc mocks the ListQueues method.
	ListQueuesFunc func(listQueuesInput *sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error)

	// ListQueuesPagesFunc mocks the ListQueuesPages method.
	ListQueuesPagesFunc func(listQueuesInput *sqs.ListQueuesInput, fn func(*sqs.ListQueuesOutput, bool) bool) error

	// ListQueuesPagesWithContextFunc mocks the ListQueuesPagesWithContext method.
	ListQueuesPagesWithContextFunc func(contextMoqParam context.Context, listQueuesInput *sqs.ListQueuesInput, fn func(*sqs.ListQueuesOutput, bool) bool, options ...request.Option) error

	// ListQueuesRequestFunc mocks the ListQueuesRequest method.
	ListQueuesRequestFunc func(listQueuesInput *sqs.ListQueuesInput) (*request.Request, *sqs.ListQueuesOutput)

	// ListQueuesWithContextFunc mocks the ListQueuesWithContext method.
	ListQueuesWithContextFunc func(contextMoqParam context.Context, listQueuesInput *sqs.ListQueuesInput, options ...request.Option) (*sqs.ListQueuesOutput, error)

	// PurgeQueueFunc mocks the PurgeQueue method.
	PurgeQueueFunc func(purgeQueueInput *sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error)

	// PurgeQueueRequestFunc mocks the PurgeQueueRequest method.
	PurgeQueueRequestFunc func(purgeQueueInput *sqs.PurgeQueueInput) (*request.Request, *sqs.PurgeQueueOutput)

	// PurgeQueueWithContextFunc mocks the PurgeQueueWithContext method.
	PurgeQueueWithContextFunc func(contextMoqParam context.Context, purgeQueueInput *sqs.PurgeQueueInput, options ...request.Option) (*sqs.PurgeQueueOutput, error)

	// ReceiveMessageFunc mocks the ReceiveMessage method.
	ReceiveMessageFunc func(receiveMessageInput *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error)

	// ReceiveMessageRequestFunc mocks the ReceiveMessageRequest method.
	ReceiveMessageRequestFunc func(receiveMessageInput *sqs.ReceiveMessageInput) (*request.Request, *sqs.ReceiveMessageOutput)

	// ReceiveMessageWithContextFunc mocks the ReceiveMessageWithContext method.
	ReceiveMessageWithContextFunc func(contextMoqParam context.Context, receiveMessageInput *sqs.ReceiveMessageInput, options ...request.Option) (*sqs.ReceiveMessageOutput, error)

	// RemovePermissionFunc mocks the RemovePermission method.
	RemovePermissionFunc func(removePermissionInput *sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error)

	// RemovePermissionRequestFunc mocks the RemovePermissionRequest method.
	RemovePermissionRequestFunc func(removePermissionInput *sqs.RemovePermissionInput) (*request.Request, *sqs.RemovePermissionOutput)

	// RemovePermissionWithContextFunc mocks the RemovePermissionWithContext method.
	RemovePermissionWithContextFunc func(contextMoqParam context.Context, removePermissionInput *sqs.RemovePermissionInput, options ...request.Option) (*sqs.RemovePermissionOutput, error)

	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(sendMessageInput *sqs.SendMessageInput) (*sqs.SendMessageOutput, error)

	// SendMessageBatchFunc mocks the SendMessageBatch method.
	SendMessageBatchFunc func(sendMessageBatchInput *sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error)

	// SendMessageBatchRequestFunc mocks the SendMessageBatchRequest method.
	SendMessageBatchRequestFunc func(sendMessageBatchInput *sqs.SendMessageBatchInput) (*request.Request, *sqs.SendMessageBatchOutput)

	// SendMessageBatchWithContextFunc mocks the SendMessageBatchWithContext method.
	SendMessageBatchWithContextFunc func(contextMoqParam context.Context, sendMessageBatchInput *sqs.SendMessageBatchInput, options ...request.Option) (*sqs.SendMessageBatchOutput, error)

	// SendMessageRequestFunc mocks the SendMessageRequest method.
	SendMessageRequestFunc func(sendMessageInput *sqs.SendMessageInput) (*request.Request, *sqs.SendMessageOutput)

	// SendMessageWithContextFunc mocks the SendMessageWithContext method.
	SendMessageWithContextFunc func(contextMoqParam context.Context, sendMessageInput *sqs.SendMessageInput, options ...request.Option) (*sqs.SendMessageOutput, error)

	// SetQueueAttributesFunc mocks the SetQueueAttributes method.
	SetQueueAttributesFunc func(setQueueAttributesInput *sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error)

	// SetQueueAttributesRequestFunc mocks the SetQueueAttributesRequest method.
	SetQueueAttributesRequestFunc func(setQueueAttributesInput *sqs.SetQueueAttributesInput) (*request.Request, *sqs.SetQueueAttributesOutput)

	// SetQueueAttributesWithContextFunc mocks the SetQueueAttributesWithContext method.
	SetQueueAttributesWithContextFunc func(contextMoqParam context.Context, setQueueAttributesInput *sqs.SetQueueAttributesInput, options ...request.Option) (*sqs.SetQueueAttributesOutput, error)

	// TagQueueFunc mocks the TagQueue method.
	TagQueueFunc func(tagQueueInput *sqs.TagQueueInput) (*sqs.TagQueueOutput, error)

	// TagQueueRequestFunc mocks the TagQueueRequest method.
	TagQueueRequestFunc func(tagQueueInput *sqs.TagQueueInput) (*request.Request, *sqs.TagQueueOutput)

	// TagQueueWithContextFunc mocks the TagQueueWithContext method.
	TagQueueWithContextFunc func(contextMoqParam context.Context, tagQueueInput *sqs.TagQueueInput, options ...request.Option) (*sqs.TagQueueOutput, error)

	// UntagQueueFunc mocks the UntagQueue method.
	UntagQueueFunc func(untagQueueInput *sqs.UntagQueueInput) (*sqs.UntagQueueOutput, error)

	// UntagQueueRequestFunc mocks the UntagQueueRequest method.
	UntagQueueRequestFunc func(untagQueueInput *sqs.UntagQueueInput) (*request.Request, *sqs.UntagQueueOutput)

	// UntagQueueWithContextFunc mocks the UntagQueueWithContext method.
	UntagQueueWithContextFunc func(contextMoqParam context.Context, untagQueueInput *sqs.UntagQueueInput, options ...request.Option) (*sqs.UntagQueueOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddPermission holds details about calls to the AddPermission method.
		AddPermission []struct {
			// AddPermissionInput is the addPermissionInput argument value.
			AddPermissionInput *sqs.AddPermissionInput
		}
		// AddPermissionRequest holds details about calls to the AddPermissionRequest method.
		AddPermissionRequest []struct {
			// AddPermissionInput is the addPermissionInput argument value.
			AddPermissionInput *sqs.AddPermissionInput
		}
		// AddPermissionWithContext holds details about calls to the AddPermissionWithContext method.
		AddPermissionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddPermissionInput is the addPermissionInput argument value.
			AddPermissionInput *sqs.AddPermissionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ChangeMessageVisibility holds details about calls to the ChangeMessageVisibility method.
		ChangeMessageVisibility []struct {
			// ChangeMessageVisibilityInput is the changeMessageVisibilityInput argument value.
			ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
		}
		// ChangeMessageVisibilityBatch holds details about calls to the ChangeMessageVisibilityBatch method.
		ChangeMessageVisibilityBatch []struct {
			// ChangeMessageVisibilityBatchInput is the changeMessageVisibilityBatchInput argument value.
			ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
		}
		// ChangeMessageVisibilityBatchRequest holds details about calls to the ChangeMessageVisibilityBatchRequest method.
		ChangeMessageVisibilityBatchRequest []struct {
			// ChangeMessageVisibilityBatchInput is the changeMessageVisibilityBatchInput argument value.
			ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
		}
		// ChangeMessageVisibilityBatchWithContext holds details about calls to the ChangeMessageVisibilityBatchWithContext method.
		ChangeMessageVisibilityBatchWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ChangeMessageVisibilityBatchInput is the changeMessageVisibilityBatchInput argument value.
			ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ChangeMessageVisibilityRequest holds details about calls to the ChangeMessageVisibilityRequest method.
		ChangeMessageVisibilityRequest []struct {
			// ChangeMessageVisibilityInput is the changeMessageVisibilityInput argument value.
			ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
		}
		// ChangeMessageVisibilityWithContext holds details about calls to the ChangeMessageVisibilityWithContext method.
		ChangeMessageVisibilityWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ChangeMessageVisibilityInput is the changeMessageVisibilityInput argument value.
			ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateQueue holds details about calls to the CreateQueue method.
		CreateQueue []struct {
			// CreateQueueInput is the createQueueInput argument value.
			CreateQueueInput *sqs.CreateQueueInput
		}
		// CreateQueueRequest holds details about calls to the CreateQueueRequest method.
		CreateQueueRequest []struct {
			// CreateQueueInput is the createQueueInput argument value.
			CreateQueueInput *sqs.CreateQueueInput
		}
		// CreateQueueWithContext holds details about calls to the CreateQueueWithContext method.
		CreateQueueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateQueueInput is the createQueueInput argument value.
			CreateQueueInput *sqs.CreateQueueInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// DeleteMessageInput is the deleteMessageInput argument value.
			DeleteMessageInput *sqs.DeleteMessageInput
		}
		// DeleteMessageBatch holds details about calls to the DeleteMessageBatch method.
		DeleteMessageBatch []struct {
			// DeleteMessageBatchInput is the deleteMessageBatchInput argument value.
			DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
		}
		// DeleteMessageBatchRequest holds details about calls to the DeleteMessageBatchRequest method.
		DeleteMessageBatchRequest []struct {
			// DeleteMessageBatchInput is the deleteMessageBatchInput argument value.
			DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
		}
		// DeleteMessageBatchWithContext holds details about calls to the DeleteMessageBatchWithContext method.
		DeleteMessageBatchWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteMessageBatchInput is the deleteMessageBatchInput argument value.
			DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteMessageRequest holds details about calls to the DeleteMessageRequest method.
		DeleteMessageRequest []struct {
			// DeleteMessageInput is the deleteMessageInput argument value.
			DeleteMessageInput *sqs.DeleteMessageInput
		}
		// DeleteMessageWithContext holds details about calls to the DeleteMessageWithContext method.
		DeleteMessageWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteMessageInput is the deleteMessageInput argument value.
			DeleteMessageInput *sqs.DeleteMessageInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteQueue holds details about calls to the DeleteQueue method.
		DeleteQueue []struct {
			// DeleteQueueInput is the deleteQueueInput argument value.
			DeleteQueueInput *sqs.DeleteQueueInput
		}
		// DeleteQueueRequest holds details about calls to the DeleteQueueRequest method.
		DeleteQueueRequest []struct {
			// DeleteQueueInput is the deleteQueueInput argument value.
			DeleteQueueInput *sqs.DeleteQueueInput
		}
		// DeleteQueueWithContext holds details about calls to the DeleteQueueWithContext method.
		DeleteQueueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteQueueInput is the deleteQueueInput argument value.
			DeleteQueueInput *sqs.DeleteQueueInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetQueueAttributes holds details about calls to the GetQueueAttributes method.
		GetQueueAttributes []struct {
			// GetQueueAttributesInput is the getQueueAttributesInput argument value.
			GetQueueAttributesInput *sqs.GetQueueAttributesInput
		}
		// GetQueueAttributesRequest holds details about calls to the GetQueueAttributesRequest method.
		GetQueueAttributesRequest []struct {
			// GetQueueAttributesInput is the getQueueAttributesInput argument value.
			GetQueueAttributesInput *sqs.GetQueueAttributesInput
		}
		// GetQueueAttributesWithContext holds details about calls to the GetQueueAttributesWithContext method.
		GetQueueAttributesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetQueueAttributesInput is the getQueueAttributesInput argument value.
			GetQueueAttributesInput *sqs.GetQueueAttributesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetQueueUrl holds details about calls to the GetQueueUrl method.
		GetQueueUrl []struct {
			// GetQueueUrlInput is the getQueueUrlInput argument value.
			GetQueueUrlInput *sqs.GetQueueUrlInput
		}
		// GetQueueUrlRequest holds details about calls to the GetQueueUrlRequest method.
		GetQueueUrlRequest []struct {
			// GetQueueUrlInput is the getQueueUrlInput argument value.
			GetQueueUrlInput *sqs.GetQueueUrlInput
		}
		// GetQueueUrlWithContext holds details about calls to the GetQueueUrlWithContext method.
		GetQueueUrlWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetQueueUrlInput is the getQueueUrlInput argument value.
			GetQueueUrlInput *sqs.GetQueueUrlInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListDeadLetterSourceQueues holds details about calls to the ListDeadLetterSourceQueues method.
		ListDeadLetterSourceQueues []struct {
			// ListDeadLetterSourceQueuesInput is the listDeadLetterSourceQueuesInput argument value.
			ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		}
		// ListDeadLetterSourceQueuesPages holds details about calls to the ListDeadLetterSourceQueuesPages method.
		ListDeadLetterSourceQueuesPages []struct {
			// ListDeadLetterSourceQueuesInput is the listDeadLetterSourceQueuesInput argument value.
			ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
			// Fn is the fn argument value.
			Fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
		}
		// ListDeadLetterSourceQueuesPagesWithContext holds details about calls to the ListDeadLetterSourceQueuesPagesWithContext method.
		ListDeadLetterSourceQueuesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListDeadLetterSourceQueuesInput is the listDeadLetterSourceQueuesInput argument value.
			ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
			// Fn is the fn argument value.
			Fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListDeadLetterSourceQueuesRequest holds details about calls to the ListDeadLetterSourceQueuesRequest method.
		ListDeadLetterSourceQueuesRequest []struct {
			// ListDeadLetterSourceQueuesInput is the listDeadLetterSourceQueuesInput argument value.
			ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		}
		// ListDeadLetterSourceQueuesWithContext holds details about calls to the ListDeadLetterSourceQueuesWithContext method.
		ListDeadLetterSourceQueuesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListDeadLetterSourceQueuesInput is the listDeadLetterSourceQueuesInput argument value.
			ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListQueueTags holds details about calls to the ListQueueTags method.
		ListQueueTags []struct {
			// ListQueueTagsInput is the listQueueTagsInput argument value.
			ListQueueTagsInput *sqs.ListQueueTagsInput
		}
		// ListQueueTagsRequest holds details about calls to the ListQueueTagsRequest method.
		ListQueueTagsRequest []struct {
			// ListQueueTagsInput is the listQueueTagsInput argument value.
			ListQueueTagsInput *sqs.ListQueueTagsInput
		}
		// ListQueueTagsWithContext holds details about calls to the ListQueueTagsWithContext method.
		ListQueueTagsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListQueueTagsInput is the listQueueTagsInput argument value.
			ListQueueTagsInput *sqs.ListQueueTagsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListQueues holds details about calls to the ListQueues method.
		ListQueues []struct {
			// ListQueuesInput is the listQueuesInput argument value.
			ListQueuesInput *sqs.ListQueuesInput
		}
		// ListQueuesPages holds details about calls to the ListQueuesPages method.
		ListQueuesPages []struct {
			// ListQueuesInput is the listQueuesInput argument value.
			ListQueuesInput *sqs.ListQueuesInput
			// Fn is the fn argument value.
			Fn func(*sqs.ListQueuesOutput, bool) bool
		}
		// ListQueuesPagesWithContext holds details about calls to the ListQueuesPagesWithContext method.
		ListQueuesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListQueuesInput is the listQueuesInput argument value.
			ListQueuesInput *sqs.ListQueuesInput
			// Fn is the fn argument value.
			Fn func(*sqs.ListQueuesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListQueuesRequest holds details about calls to the ListQueuesRequest method.
		ListQueuesRequest []struct {
			// ListQueuesInput is the listQueuesInput argument value.
			ListQueuesInput *sqs.ListQueuesInput
		}
		// ListQueuesWithContext holds details about calls to the ListQueuesWithContext method.
		ListQueuesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListQueuesInput is the listQueuesInput argument value.
			ListQueuesInput *sqs.ListQueuesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PurgeQueue holds details about calls to the PurgeQueue method.
		PurgeQueue []struct {
			// PurgeQueueInput is the purgeQueueInput argument value.
			PurgeQueueInput *sqs.PurgeQueueInput
		}
		// PurgeQueueRequest holds details about calls to the PurgeQueueRequest method.
		PurgeQueueRequest []struct {
			// PurgeQueueInput is the purgeQueueInput argument value.
			PurgeQueueInput *sqs.PurgeQueueInput
		}
		// PurgeQueueWithContext holds details about calls to the PurgeQueueWithContext method.
		PurgeQueueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PurgeQueueInput is the purgeQueueInput argument value.
			PurgeQueueInput *sqs.PurgeQueueInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ReceiveMessage holds details about calls to the ReceiveMessage method.
		ReceiveMessage []struct {
			// ReceiveMessageInput is the receiveMessageInput argument value.
			ReceiveMessageInput *sqs.ReceiveMessageInput
		}
		// ReceiveMessageRequest holds details about calls to the ReceiveMessageRequest method.
		ReceiveMessageRequest []struct {
			// ReceiveMessageInput is the receiveMessageInput argument value.
			ReceiveMessageInput *sqs.ReceiveMessageInput
		}
		// ReceiveMessageWithContext holds details about calls to the ReceiveMessageWithContext method.
		ReceiveMessageWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ReceiveMessageInput is the receiveMessageInput argument value.
			ReceiveMessageInput *sqs.ReceiveMessageInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemovePermission holds details about calls to the RemovePermission method.
		RemovePermission []struct {
			// RemovePermissionInput is the removePermissionInput argument value.
			RemovePermissionInput *sqs.RemovePermissionInput
		}
		// RemovePermissionRequest holds details about calls to the RemovePermissionRequest method.
		RemovePermissionRequest []struct {
			// RemovePermissionInput is the removePermissionInput argument value.
			RemovePermissionInput *sqs.RemovePermissionInput
		}
		// RemovePermissionWithContext holds details about calls to the RemovePermissionWithContext method.
		RemovePermissionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemovePermissionInput is the removePermissionInput argument value.
			RemovePermissionInput *sqs.RemovePermissionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// SendMessageInput is the sendMessageInput argument value.
			SendMessageInput *sqs.SendMessageInput
		}
		// SendMessageBatch holds details about calls to the SendMessageBatch method.
		SendMessageBatch []struct {
			// SendMessageBatchInput is the sendMessageBatchInput argument value.
			SendMessageBatchInput *sqs.SendMessageBatchInput
		}
		// SendMessageBatchRequest holds details about calls to the SendMessageBatchRequest method.
		SendMessageBatchRequest []struct {
			// SendMessageBatchInput is the sendMessageBatchInput argument value.
			SendMessageBatchInput *sqs.SendMessageBatchInput
		}
		// SendMessageBatchWithContext holds details about calls to the SendMessageBatchWithContext method.
		SendMessageBatchWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SendMessageBatchInput is the sendMessageBatchInput argument value.
			SendMessageBatchInput *sqs.SendMessageBatchInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SendMessageRequest holds details about calls to the SendMessageRequest method.
		SendMessageRequest []struct {
			// SendMessageInput is the sendMessageInput argument value.
			SendMessageInput *sqs.SendMessageInput
		}
		// SendMessageWithContext holds details about calls to the SendMessageWithContext method.
		SendMessageWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SendMessageInput is the sendMessageInput argument value.
			SendMessageInput *sqs.SendMessageInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SetQueueAttributes holds details about calls to the SetQueueAttributes method.
		SetQueueAttributes []struct {
			// SetQueueAttributesInput is the setQueueAttributesInput argument value.
			SetQueueAttributesInput *sqs.SetQueueAttributesInput
		}
		// SetQueueAttributesRequest holds details about calls to the SetQueueAttributesRequest method.
		SetQueueAttributesRequest []struct {
			// SetQueueAttributesInput is the setQueueAttributesInput argument value.
			SetQueueAttributesInput *sqs.SetQueueAttributesInput
		}
		// SetQueueAttributesWithContext holds details about calls to the SetQueueAttributesWithContext method.
		SetQueueAttributesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SetQueueAttributesInput is the setQueueAttributesInput argument value.
			SetQueueAttributesInput *sqs.SetQueueAttributesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// TagQueue holds details about calls to the TagQueue method.
		TagQueue []struct {
			// TagQueueInput is the tagQueueInput argument value.
			TagQueueInput *sqs.TagQueueInput
		}
		// TagQueueRequest holds details about calls to the TagQueueRequest method.
		TagQueueRequest []struct {
			// TagQueueInput is the tagQueueInput argument value.
			TagQueueInput *sqs.TagQueueInput
		}
		// TagQueueWithContext holds details about calls to the TagQueueWithContext method.
		TagQueueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// TagQueueInput is the tagQueueInput argument value.
			TagQueueInput *sqs.TagQueueInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UntagQueue holds details about calls to the UntagQueue method.
		UntagQueue []struct {
			// UntagQueueInput is the untagQueueInput argument value.
			UntagQueueInput *sqs.UntagQueueInput
		}
		// UntagQueueRequest holds details about calls to the UntagQueueRequest method.
		UntagQueueRequest []struct {
			// UntagQueueInput is the untagQueueInput argument value.
			UntagQueueInput *sqs.UntagQueueInput
		}
		// UntagQueueWithContext holds details about calls to the UntagQueueWithContext method.
		UntagQueueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UntagQueueInput is the untagQueueInput argument value.
			UntagQueueInput *sqs.UntagQueueInput
			// Options is the options argument value.
			Options []request.Option
		}
	}
	lockAddPermission                              sync.RWMutex
	lockAddPermissionRequest                       sync.RWMutex
	lockAddPermissionWithContext                   sync.RWMutex
	lockChangeMessageVisibility                    sync.RWMutex
	lockChangeMessageVisibilityBatch               sync.RWMutex
	lockChangeMessageVisibilityBatchRequest        sync.RWMutex
	lockChangeMessageVisibilityBatchWithContext    sync.RWMutex
	lockChangeMessageVisibilityRequest             sync.RWMutex
	lockChangeMessageVisibilityWithContext         sync.RWMutex
	lockCreateQueue                                sync.RWMutex
	lockCreateQueueRequest                         sync.RWMutex
	lockCreateQueueWithContext                     sync.RWMutex
	lockDeleteMessage                              sync.RWMutex
	lockDeleteMessageBatch                         sync.RWMutex
	lockDeleteMessageBatchRequest                  sync.RWMutex
	lockDeleteMessageBatchWithContext              sync.RWMutex
	lockDeleteMessageRequest                       sync.RWMutex
	lockDeleteMessageWithContext                   sync.RWMutex
	lockDeleteQueue                                sync.RWMutex
	lockDeleteQueueRequest                         sync.RWMutex
	lockDeleteQueueWithContext                     sync.RWMutex
	lockGetQueueAttributes                         sync.RWMutex
	lockGetQueueAttributesRequest                  sync.RWMutex
	lockGetQueueAttributesWithContext              sync.RWMutex
	lockGetQueueUrl                                sync.RWMutex
	lockGetQueueUrlRequest                         sync.RWMutex
	lockGetQueueUrlWithContext                     sync.RWMutex
	lockListDeadLetterSourceQueues                 sync.RWMutex
	lockListDeadLetterSourceQueuesPages            sync.RWMutex
	lockListDeadLetterSourceQueuesPagesWithContext sync.RWMutex
	lockListDeadLetterSourceQueuesRequest          sync.RWMutex
	lockListDeadLetterSourceQueuesWithContext      sync.RWMutex
	lockListQueueTags                              sync.RWMutex
	lockListQueueTagsRequest                       sync.RWMutex
	lockListQueueTagsWithContext                   sync.RWMutex
	lockListQueues                                 sync.RWMutex
	lockListQueuesPages                            sync.RWMutex
	lockListQueuesPagesWithContext                 sync.RWMutex
	lockListQueuesRequest                          sync.RWMutex
	lockListQueuesWithContext                      sync.RWMutex
	lockPurgeQueue                                 sync.RWMutex
	lockPurgeQueueRequest                          sync.RWMutex
	lockPurgeQueueWithContext                      sync.RWMutex
	lockReceiveMessage                             sync.RWMutex
	lockReceiveMessageRequest                      sync.RWMutex
	lockReceiveMessageWithContext                  sync.RWMutex
	lockRemovePermission                           sync.RWMutex
	lockRemovePermissionRequest                    sync.RWMutex
	lockRemovePermissionWithContext                sync.RWMutex
	lockSendMessage                                sync.RWMutex
	lockSendMessageBatch                           sync.RWMutex
	lockSendMessageBatchRequest                    sync.RWMutex
	lockSendMessageBatchWithContext                sync.RWMutex
	lockSendMessageRequest                         sync.RWMutex
	lockSendMessageWithContext                     sync.RWMutex
	lockSetQueueAttributes                         sync.RWMutex
	lockSetQueueAttributesRequest                  sync.RWMutex
	lockSetQueueAttributesWithContext              sync.RWMutex
	lockTagQueue                                   sync.RWMutex
	lockTagQueueRequest                            sync.RWMutex
	lockTagQueueWithContext                        sync.RWMutex
	lockUntagQueue                                 sync.RWMutex
	lockUntagQueueRequest                          sync.RWMutex
	lockUntagQueueWithContext                      sync.RWMutex
}

// AddPermission calls AddPermissionFunc.
func (mock *SQSAPIMock) AddPermission(addPermissionInput *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error) {
	if mock.AddPermissionFunc == nil {
		panic("SQSAPIMock.AddPermissionFunc: method is nil but SQSAPI.AddPermission was just called")
	}
	callInfo := struct {
		AddPermissionInput *sqs.AddPermissionInput
	}{
		AddPermissionInput: addPermissionInput,
	}
	mock.lockAddPermission.Lock()
	mock.calls.AddPermission = append(mock.calls.AddPermission, callInfo)
	mock.lockAddPermission.Unlock()
	return mock.AddPermissionFunc(addPermissionInput)
}

// AddPermissionCalls gets all the calls that were made to AddPermission.
// Check the length with:
//     len(mockedSQSAPI.AddPermissionCalls())
func (mock *SQSAPIMock) AddPermissionCalls() []struct {
	AddPermissionInput *sqs.AddPermissionInput
} {
	var calls []struct {
		AddPermissionInput *sqs.AddPermissionInput
	}
	mock.lockAddPermission.RLock()
	calls = mock.calls.AddPermission
	mock.lockAddPermission.RUnlock()
	return calls
}

// AddPermissionRequest calls AddPermissionRequestFunc.
func (mock *SQSAPIMock) AddPermissionRequest(addPermissionInput *sqs.AddPermissionInput) (*request.Request, *sqs.AddPermissionOutput) {
	if mock.AddPermissionRequestFunc == nil {
		panic("SQSAPIMock.AddPermissionRequestFunc: method is nil but SQSAPI.AddPermissionRequest was just called")
	}
	callInfo := struct {
		AddPermissionInput *sqs.AddPermissionInput
	}{
		AddPermissionInput: addPermissionInput,
	}
	mock.lockAddPermissionRequest.Lock()
	mock.calls.AddPermissionRequest = append(mock.calls.AddPermissionRequest, callInfo)
	mock.lockAddPermissionRequest.Unlock()
	return mock.AddPermissionRequestFunc(addPermissionInput)
}

// AddPermissionRequestCalls gets all the calls that were made to AddPermissionRequest.
// Check the length with:
//     len(mockedSQSAPI.AddPermissionRequestCalls())
func (mock *SQSAPIMock) AddPermissionRequestCalls() []struct {
	AddPermissionInput *sqs.AddPermissionInput
} {
	var calls []struct {
		AddPermissionInput *sqs.AddPermissionInput
	}
	mock.lockAddPermissionRequest.RLock()
	calls = mock.calls.AddPermissionRequest
	mock.lockAddPermissionRequest.RUnlock()
	return calls
}

// AddPermissionWithContext calls AddPermissionWithContextFunc.
func (mock *SQSAPIMock) AddPermissionWithContext(contextMoqParam context.Context, addPermissionInput *sqs.AddPermissionInput, options ...request.Option) (*sqs.AddPermissionOutput, error) {
	if mock.AddPermissionWithContextFunc == nil {
		panic("SQSAPIMock.AddPermissionWithContextFunc: method is nil but SQSAPI.AddPermissionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		AddPermissionInput *sqs.AddPermissionInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		AddPermissionInput: addPermissionInput,
		Options:            options,
	}
	mock.lockAddPermissionWithContext.Lock()
	mock.calls.AddPermissionWithContext = append(mock.calls.AddPermissionWithContext, callInfo)
	mock.lockAddPermissionWithContext.Unlock()
	return mock.AddPermissionWithContextFunc(contextMoqParam, addPermissionInput, options...)
}

// AddPermissionWithContextCalls gets all the calls that were made to AddPermissionWithContext.
// Check the length with:
//     len(mockedSQSAPI.AddPermissionWithContextCalls())
func (mock *SQSAPIMock) AddPermissionWithContextCalls() []struct {
	ContextMoqParam    context.Context
	AddPermissionInput *sqs.AddPermissionInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		AddPermissionInput *sqs.AddPermissionInput
		Options            []request.Option
	}
	mock.lockAddPermissionWithContext.RLock()
	calls = mock.calls.AddPermissionWithContext
	mock.lockAddPermissionWithContext.RUnlock()
	return calls
}

// ChangeMessageVisibility calls ChangeMessageVisibilityFunc.
func (mock *SQSAPIMock) ChangeMessageVisibility(changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error) {
	if mock.ChangeMessageVisibilityFunc == nil {
		panic("SQSAPIMock.ChangeMessageVisibilityFunc: method is nil but SQSAPI.ChangeMessageVisibility was just called")
	}
	callInfo := struct {
		ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
	}{
		ChangeMessageVisibilityInput: changeMessageVisibilityInput,
	}
	mock.lockChangeMessageVisibility.Lock()
	mock.calls.ChangeMessageVisibility = append(mock.calls.ChangeMessageVisibility, callInfo)
	mock.lockChangeMessageVisibility.Unlock()
	return mock.ChangeMessageVisibilityFunc(changeMessageVisibilityInput)
}

// ChangeMessageVisibilityCalls gets all the calls that were made to ChangeMessageVisibility.
// Check the length with:
//     len(mockedSQSAPI.ChangeMessageVisibilityCalls())
func (mock *SQSAPIMock) ChangeMessageVisibilityCalls() []struct {
	ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
} {
	var calls []struct {
		ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
	}
	mock.lockChangeMessageVisibility.RLock()
	calls = mock.calls.ChangeMessageVisibility
	mock.lockChangeMessageVisibility.RUnlock()
	return calls
}

// ChangeMessageVisibilityBatch calls ChangeMessageVisibilityBatchFunc.
func (mock *SQSAPIMock) ChangeMessageVisibilityBatch(changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	if mock.ChangeMessageVisibilityBatchFunc == nil {
		panic("SQSAPIMock.ChangeMessageVisibilityBatchFunc: method is nil but SQSAPI.ChangeMessageVisibilityBatch was just called")
	}
	callInfo := struct {
		ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
	}{
		ChangeMessageVisibilityBatchInput: changeMessageVisibilityBatchInput,
	}
	mock.lockChangeMessageVisibilityBatch.Lock()
	mock.calls.ChangeMessageVisibilityBatch = append(mock.calls.ChangeMessageVisibilityBatch, callInfo)
	mock.lockChangeMessageVisibilityBatch.Unlock()
	return mock.ChangeMessageVisibilityBatchFunc(changeMessageVisibilityBatchInput)
}

// ChangeMessageVisibilityBatchCalls gets all the calls that were made to ChangeMessageVisibilityBatch.
// Check the length with:
//     len(mockedSQSAPI.ChangeMessageVisibilityBatchCalls())
func (mock *SQSAPIMock) ChangeMessageVisibilityBatchCalls() []struct {
	ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
} {
	var calls []struct {
		ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
	}
	mock.lockChangeMessageVisibilityBatch.RLock()
	calls = mock.calls.ChangeMessageVisibilityBatch
	mock.lockChangeMessageVisibilityBatch.RUnlock()
	return calls
}

// ChangeMessageVisibilityBatchRequest calls ChangeMessageVisibilityBatchRequestFunc.
func (mock *SQSAPIMock) ChangeMessageVisibilityBatchRequest(changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput) (*request.Request, *sqs.ChangeMessageVisibilityBatchOutput) {
	if mock.ChangeMessageVisibilityBatchRequestFunc == nil {
		panic("SQSAPIMock.ChangeMessageVisibilityBatchRequestFunc: method is nil but SQSAPI.ChangeMessageVisibilityBatchRequest was just called")
	}
	callInfo := struct {
		ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
	}{
		ChangeMessageVisibilityBatchInput: changeMessageVisibilityBatchInput,
	}
	mock.lockChangeMessageVisibilityBatchRequest.Lock()
	mock.calls.ChangeMessageVisibilityBatchRequest = append(mock.calls.ChangeMessageVisibilityBatchRequest, callInfo)
	mock.lockChangeMessageVisibilityBatchRequest.Unlock()
	return mock.ChangeMessageVisibilityBatchRequestFunc(changeMessageVisibilityBatchInput)
}

// ChangeMessageVisibilityBatchRequestCalls gets all the calls that were made to ChangeMessageVisibilityBatchRequest.
// Check the length with:
//     len(mockedSQSAPI.ChangeMessageVisibilityBatchRequestCalls())
func (mock *SQSAPIMock) ChangeMessageVisibilityBatchRequestCalls() []struct {
	ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
} {
	var calls []struct {
		ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
	}
	mock.lockChangeMessageVisibilityBatchRequest.RLock()
	calls = mock.calls.ChangeMessageVisibilityBatchRequest
	mock.lockChangeMessageVisibilityBatchRequest.RUnlock()
	return calls
}

// ChangeMessageVisibilityBatchWithContext calls ChangeMessageVisibilityBatchWithContextFunc.
func (mock *SQSAPIMock) ChangeMessageVisibilityBatchWithContext(contextMoqParam context.Context, changeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput, options ...request.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error) {
	if mock.ChangeMessageVisibilityBatchWithContextFunc == nil {
		panic("SQSAPIMock.ChangeMessageVisibilityBatchWithContextFunc: method is nil but SQSAPI.ChangeMessageVisibilityBatchWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		ChangeMessageVisibilityBatchInput: changeMessageVisibilityBatchInput,
		Options:                           options,
	}
	mock.lockChangeMessageVisibilityBatchWithContext.Lock()
	mock.calls.ChangeMessageVisibilityBatchWithContext = append(mock.calls.ChangeMessageVisibilityBatchWithContext, callInfo)
	mock.lockChangeMessageVisibilityBatchWithContext.Unlock()
	return mock.ChangeMessageVisibilityBatchWithContextFunc(contextMoqParam, changeMessageVisibilityBatchInput, options...)
}

// ChangeMessageVisibilityBatchWithContextCalls gets all the calls that were made to ChangeMessageVisibilityBatchWithContext.
// Check the length with:
//     len(mockedSQSAPI.ChangeMessageVisibilityBatchWithContextCalls())
func (mock *SQSAPIMock) ChangeMessageVisibilityBatchWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		ChangeMessageVisibilityBatchInput *sqs.ChangeMessageVisibilityBatchInput
		Options                           []request.Option
	}
	mock.lockChangeMessageVisibilityBatchWithContext.RLock()
	calls = mock.calls.ChangeMessageVisibilityBatchWithContext
	mock.lockChangeMessageVisibilityBatchWithContext.RUnlock()
	return calls
}

// ChangeMessageVisibilityRequest calls ChangeMessageVisibilityRequestFunc.
func (mock *SQSAPIMock) ChangeMessageVisibilityRequest(changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput) (*request.Request, *sqs.ChangeMessageVisibilityOutput) {
	if mock.ChangeMessageVisibilityRequestFunc == nil {
		panic("SQSAPIMock.ChangeMessageVisibilityRequestFunc: method is nil but SQSAPI.ChangeMessageVisibilityRequest was just called")
	}
	callInfo := struct {
		ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
	}{
		ChangeMessageVisibilityInput: changeMessageVisibilityInput,
	}
	mock.lockChangeMessageVisibilityRequest.Lock()
	mock.calls.ChangeMessageVisibilityRequest = append(mock.calls.ChangeMessageVisibilityRequest, callInfo)
	mock.lockChangeMessageVisibilityRequest.Unlock()
	return mock.ChangeMessageVisibilityRequestFunc(changeMessageVisibilityInput)
}

// ChangeMessageVisibilityRequestCalls gets all the calls that were made to ChangeMessageVisibilityRequest.
// Check the length with:
//     len(mockedSQSAPI.ChangeMessageVisibilityRequestCalls())
func (mock *SQSAPIMock) ChangeMessageVisibilityRequestCalls() []struct {
	ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
} {
	var calls []struct {
		ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
	}
	mock.lockChangeMessageVisibilityRequest.RLock()
	calls = mock.calls.ChangeMessageVisibilityRequest
	mock.lockChangeMessageVisibilityRequest.RUnlock()
	return calls
}

// ChangeMessageVisibilityWithContext calls ChangeMessageVisibilityWithContextFunc.
func (mock *SQSAPIMock) ChangeMessageVisibilityWithContext(contextMoqParam context.Context, changeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput, options ...request.Option) (*sqs.ChangeMessageVisibilityOutput, error) {
	if mock.ChangeMessageVisibilityWithContextFunc == nil {
		panic("SQSAPIMock.ChangeMessageVisibilityWithContextFunc: method is nil but SQSAPI.ChangeMessageVisibilityWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		ChangeMessageVisibilityInput: changeMessageVisibilityInput,
		Options:                      options,
	}
	mock.lockChangeMessageVisibilityWithContext.Lock()
	mock.calls.ChangeMessageVisibilityWithContext = append(mock.calls.ChangeMessageVisibilityWithContext, callInfo)
	mock.lockChangeMessageVisibilityWithContext.Unlock()
	return mock.ChangeMessageVisibilityWithContextFunc(contextMoqParam, changeMessageVisibilityInput, options...)
}

// ChangeMessageVisibilityWithContextCalls gets all the calls that were made to ChangeMessageVisibilityWithContext.
// Check the length with:
//     len(mockedSQSAPI.ChangeMessageVisibilityWithContextCalls())
func (mock *SQSAPIMock) ChangeMessageVisibilityWithContextCalls() []struct {
	ContextMoqParam              context.Context
	ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		ChangeMessageVisibilityInput *sqs.ChangeMessageVisibilityInput
		Options                      []request.Option
	}
	mock.lockChangeMessageVisibilityWithContext.RLock()
	calls = mock.calls.ChangeMessageVisibilityWithContext
	mock.lockChangeMessageVisibilityWithContext.RUnlock()
	return calls
}

// CreateQueue calls CreateQueueFunc.
func (mock *SQSAPIMock) CreateQueue(createQueueInput *sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error) {
	if mock.CreateQueueFunc == nil {
		panic("SQSAPIMock.CreateQueueFunc: method is nil but SQSAPI.CreateQueue was just called")
	}
	callInfo := struct {
		CreateQueueInput *sqs.CreateQueueInput
	}{
		CreateQueueInput: createQueueInput,
	}
	mock.lockCreateQueue.Lock()
	mock.calls.CreateQueue = append(mock.calls.CreateQueue, callInfo)
	mock.lockCreateQueue.Unlock()
	return mock.CreateQueueFunc(createQueueInput)
}

// CreateQueueCalls gets all the calls that were made to CreateQueue.
// Check the length with:
//     len(mockedSQSAPI.CreateQueueCalls())
func (mock *SQSAPIMock) CreateQueueCalls() []struct {
	CreateQueueInput *sqs.CreateQueueInput
} {
	var calls []struct {
		CreateQueueInput *sqs.CreateQueueInput
	}
	mock.lockCreateQueue.RLock()
	calls = mock.calls.CreateQueue
	mock.lockCreateQueue.RUnlock()
	return calls
}

// CreateQueueRequest calls CreateQueueRequestFunc.
func (mock *SQSAPIMock) CreateQueueRequest(createQueueInput *sqs.CreateQueueInput) (*request.Request, *sqs.CreateQueueOutput) {
	if mock.CreateQueueRequestFunc == nil {
		panic("SQSAPIMock.CreateQueueRequestFunc: method is nil but SQSAPI.CreateQueueRequest was just called")
	}
	callInfo := struct {
		CreateQueueInput *sqs.CreateQueueInput
	}{
		CreateQueueInput: createQueueInput,
	}
	mock.lockCreateQueueRequest.Lock()
	mock.calls.CreateQueueRequest = append(mock.calls.CreateQueueRequest, callInfo)
	mock.lockCreateQueueRequest.Unlock()
	return mock.CreateQueueRequestFunc(createQueueInput)
}

// CreateQueueRequestCalls gets all the calls that were made to CreateQueueRequest.
// Check the length with:
//     len(mockedSQSAPI.CreateQueueRequestCalls())
func (mock *SQSAPIMock) CreateQueueRequestCalls() []struct {
	CreateQueueInput *sqs.CreateQueueInput
} {
	var calls []struct {
		CreateQueueInput *sqs.CreateQueueInput
	}
	mock.lockCreateQueueRequest.RLock()
	calls = mock.calls.CreateQueueRequest
	mock.lockCreateQueueRequest.RUnlock()
	return calls
}

// CreateQueueWithContext calls CreateQueueWithContextFunc.
func (mock *SQSAPIMock) CreateQueueWithContext(contextMoqParam context.Context, createQueueInput *sqs.CreateQueueInput, options ...request.Option) (*sqs.CreateQueueOutput, error) {
	if mock.CreateQueueWithContextFunc == nil {
		panic("SQSAPIMock.CreateQueueWithContextFunc: method is nil but SQSAPI.CreateQueueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		CreateQueueInput *sqs.CreateQueueInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		CreateQueueInput: createQueueInput,
		Options:          options,
	}
	mock.lockCreateQueueWithContext.Lock()
	mock.calls.CreateQueueWithContext = append(mock.calls.CreateQueueWithContext, callInfo)
	mock.lockCreateQueueWithContext.Unlock()
	return mock.CreateQueueWithContextFunc(contextMoqParam, createQueueInput, options...)
}

// CreateQueueWithContextCalls gets all the calls that were made to CreateQueueWithContext.
// Check the length with:
//     len(mockedSQSAPI.CreateQueueWithContextCalls())
func (mock *SQSAPIMock) CreateQueueWithContextCalls() []struct {
	ContextMoqParam  context.Context
	CreateQueueInput *sqs.CreateQueueInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		CreateQueueInput *sqs.CreateQueueInput
		Options          []request.Option
	}
	mock.lockCreateQueueWithContext.RLock()
	calls = mock.calls.CreateQueueWithContext
	mock.lockCreateQueueWithContext.RUnlock()
	return calls
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *SQSAPIMock) DeleteMessage(deleteMessageInput *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	if mock.DeleteMessageFunc == nil {
		panic("SQSAPIMock.DeleteMessageFunc: method is nil but SQSAPI.DeleteMessage was just called")
	}
	callInfo := struct {
		DeleteMessageInput *sqs.DeleteMessageInput
	}{
		DeleteMessageInput: deleteMessageInput,
	}
	mock.lockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	mock.lockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(deleteMessageInput)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//     len(mockedSQSAPI.DeleteMessageCalls())
func (mock *SQSAPIMock) DeleteMessageCalls() []struct {
	DeleteMessageInput *sqs.DeleteMessageInput
} {
	var calls []struct {
		DeleteMessageInput *sqs.DeleteMessageInput
	}
	mock.lockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	mock.lockDeleteMessage.RUnlock()
	return calls
}

// DeleteMessageBatch calls DeleteMessageBatchFunc.
func (mock *SQSAPIMock) DeleteMessageBatch(deleteMessageBatchInput *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error) {
	if mock.DeleteMessageBatchFunc == nil {
		panic("SQSAPIMock.DeleteMessageBatchFunc: method is nil but SQSAPI.DeleteMessageBatch was just called")
	}
	callInfo := struct {
		DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
	}{
		DeleteMessageBatchInput: deleteMessageBatchInput,
	}
	mock.lockDeleteMessageBatch.Lock()
	mock.calls.DeleteMessageBatch = append(mock.calls.DeleteMessageBatch, callInfo)
	mock.lockDeleteMessageBatch.Unlock()
	return mock.DeleteMessageBatchFunc(deleteMessageBatchInput)
}

// DeleteMessageBatchCalls gets all the calls that were made to DeleteMessageBatch.
// Check the length with:
//     len(mockedSQSAPI.DeleteMessageBatchCalls())
func (mock *SQSAPIMock) DeleteMessageBatchCalls() []struct {
	DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
} {
	var calls []struct {
		DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
	}
	mock.lockDeleteMessageBatch.RLock()
	calls = mock.calls.DeleteMessageBatch
	mock.lockDeleteMessageBatch.RUnlock()
	return calls
}

// DeleteMessageBatchRequest calls DeleteMessageBatchRequestFunc.
func (mock *SQSAPIMock) DeleteMessageBatchRequest(deleteMessageBatchInput *sqs.DeleteMessageBatchInput) (*request.Request, *sqs.DeleteMessageBatchOutput) {
	if mock.DeleteMessageBatchRequestFunc == nil {
		panic("SQSAPIMock.DeleteMessageBatchRequestFunc: method is nil but SQSAPI.DeleteMessageBatchRequest was just called")
	}
	callInfo := struct {
		DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
	}{
		DeleteMessageBatchInput: deleteMessageBatchInput,
	}
	mock.lockDeleteMessageBatchRequest.Lock()
	mock.calls.DeleteMessageBatchRequest = append(mock.calls.DeleteMessageBatchRequest, callInfo)
	mock.lockDeleteMessageBatchRequest.Unlock()
	return mock.DeleteMessageBatchRequestFunc(deleteMessageBatchInput)
}

// DeleteMessageBatchRequestCalls gets all the calls that were made to DeleteMessageBatchRequest.
// Check the length with:
//     len(mockedSQSAPI.DeleteMessageBatchRequestCalls())
func (mock *SQSAPIMock) DeleteMessageBatchRequestCalls() []struct {
	DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
} {
	var calls []struct {
		DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
	}
	mock.lockDeleteMessageBatchRequest.RLock()
	calls = mock.calls.DeleteMessageBatchRequest
	mock.lockDeleteMessageBatchRequest.RUnlock()
	return calls
}

// DeleteMessageBatchWithContext calls DeleteMessageBatchWithContextFunc.
func (mock *SQSAPIMock) DeleteMessageBatchWithContext(contextMoqParam context.Context, deleteMessageBatchInput *sqs.DeleteMessageBatchInput, options ...request.Option) (*sqs.DeleteMessageBatchOutput, error) {
	if mock.DeleteMessageBatchWithContextFunc == nil {
		panic("SQSAPIMock.DeleteMessageBatchWithContextFunc: method is nil but SQSAPI.DeleteMessageBatchWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteMessageBatchInput: deleteMessageBatchInput,
		Options:                 options,
	}
	mock.lockDeleteMessageBatchWithContext.Lock()
	mock.calls.DeleteMessageBatchWithContext = append(mock.calls.DeleteMessageBatchWithContext, callInfo)
	mock.lockDeleteMessageBatchWithContext.Unlock()
	return mock.DeleteMessageBatchWithContextFunc(contextMoqParam, deleteMessageBatchInput, options...)
}

// DeleteMessageBatchWithContextCalls gets all the calls that were made to DeleteMessageBatchWithContext.
// Check the length with:
//     len(mockedSQSAPI.DeleteMessageBatchWithContextCalls())
func (mock *SQSAPIMock) DeleteMessageBatchWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteMessageBatchInput *sqs.DeleteMessageBatchInput
		Options                 []request.Option
	}
	mock.lockDeleteMessageBatchWithContext.RLock()
	calls = mock.calls.DeleteMessageBatchWithContext
	mock.lockDeleteMessageBatchWithContext.RUnlock()
	return calls
}

// DeleteMessageRequest calls DeleteMessageRequestFunc.
func (mock *SQSAPIMock) DeleteMessageRequest(deleteMessageInput *sqs.DeleteMessageInput) (*request.Request, *sqs.DeleteMessageOutput) {
	if mock.DeleteMessageRequestFunc == nil {
		panic("SQSAPIMock.DeleteMessageRequestFunc: method is nil but SQSAPI.DeleteMessageRequest was just called")
	}
	callInfo := struct {
		DeleteMessageInput *sqs.DeleteMessageInput
	}{
		DeleteMessageInput: deleteMessageInput,
	}
	mock.lockDeleteMessageRequest.Lock()
	mock.calls.DeleteMessageRequest = append(mock.calls.DeleteMessageRequest, callInfo)
	mock.lockDeleteMessageRequest.Unlock()
	return mock.DeleteMessageRequestFunc(deleteMessageInput)
}

// DeleteMessageRequestCalls gets all the calls that were made to DeleteMessageRequest.
// Check the length with:
//     len(mockedSQSAPI.DeleteMessageRequestCalls())
func (mock *SQSAPIMock) DeleteMessageRequestCalls() []struct {
	DeleteMessageInput *sqs.DeleteMessageInput
} {
	var calls []struct {
		DeleteMessageInput *sqs.DeleteMessageInput
	}
	mock.lockDeleteMessageRequest.RLock()
	calls = mock.calls.DeleteMessageRequest
	mock.lockDeleteMessageRequest.RUnlock()
	return calls
}

// DeleteMessageWithContext calls DeleteMessageWithContextFunc.
func (mock *SQSAPIMock) DeleteMessageWithContext(contextMoqParam context.Context, deleteMessageInput *sqs.DeleteMessageInput, options ...request.Option) (*sqs.DeleteMessageOutput, error) {
	if mock.DeleteMessageWithContextFunc == nil {
		panic("SQSAPIMock.DeleteMessageWithContextFunc: method is nil but SQSAPI.DeleteMessageWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		DeleteMessageInput *sqs.DeleteMessageInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		DeleteMessageInput: deleteMessageInput,
		Options:            options,
	}
	mock.lockDeleteMessageWithContext.Lock()
	mock.calls.DeleteMessageWithContext = append(mock.calls.DeleteMessageWithContext, callInfo)
	mock.lockDeleteMessageWithContext.Unlock()
	return mock.DeleteMessageWithContextFunc(contextMoqParam, deleteMessageInput, options...)
}

// DeleteMessageWithContextCalls gets all the calls that were made to DeleteMessageWithContext.
// Check the length with:
//     len(mockedSQSAPI.DeleteMessageWithContextCalls())
func (mock *SQSAPIMock) DeleteMessageWithContextCalls() []struct {
	ContextMoqParam    context.Context
	DeleteMessageInput *sqs.DeleteMessageInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		DeleteMessageInput *sqs.DeleteMessageInput
		Options            []request.Option
	}
	mock.lockDeleteMessageWithContext.RLock()
	calls = mock.calls.DeleteMessageWithContext
	mock.lockDeleteMessageWithContext.RUnlock()
	return calls
}

// DeleteQueue calls DeleteQueueFunc.
func (mock *SQSAPIMock) DeleteQueue(deleteQueueInput *sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error) {
	if mock.DeleteQueueFunc == nil {
		panic("SQSAPIMock.DeleteQueueFunc: method is nil but SQSAPI.DeleteQueue was just called")
	}
	callInfo := struct {
		DeleteQueueInput *sqs.DeleteQueueInput
	}{
		DeleteQueueInput: deleteQueueInput,
	}
	mock.lockDeleteQueue.Lock()
	mock.calls.DeleteQueue = append(mock.calls.DeleteQueue, callInfo)
	mock.lockDeleteQueue.Unlock()
	return mock.DeleteQueueFunc(deleteQueueInput)
}

// DeleteQueueCalls gets all the calls that were made to DeleteQueue.
// Check the length with:
//     len(mockedSQSAPI.DeleteQueueCalls())
func (mock *SQSAPIMock) DeleteQueueCalls() []struct {
	DeleteQueueInput *sqs.DeleteQueueInput
} {
	var calls []struct {
		DeleteQueueInput *sqs.DeleteQueueInput
	}
	mock.lockDeleteQueue.RLock()
	calls = mock.calls.DeleteQueue
	mock.lockDeleteQueue.RUnlock()
	return calls
}

// DeleteQueueRequest calls DeleteQueueRequestFunc.
func (mock *SQSAPIMock) DeleteQueueRequest(deleteQueueInput *sqs.DeleteQueueInput) (*request.Request, *sqs.DeleteQueueOutput) {
	if mock.DeleteQueueRequestFunc == nil {
		panic("SQSAPIMock.DeleteQueueRequestFunc: method is nil but SQSAPI.DeleteQueueRequest was just called")
	}
	callInfo := struct {
		DeleteQueueInput *sqs.DeleteQueueInput
	}{
		DeleteQueueInput: deleteQueueInput,
	}
	mock.lockDeleteQueueRequest.Lock()
	mock.calls.DeleteQueueRequest = append(mock.calls.DeleteQueueRequest, callInfo)
	mock.lockDeleteQueueRequest.Unlock()
	return mock.DeleteQueueRequestFunc(deleteQueueInput)
}

// DeleteQueueRequestCalls gets all the calls that were made to DeleteQueueRequest.
// Check the length with:
//     len(mockedSQSAPI.DeleteQueueRequestCalls())
func (mock *SQSAPIMock) DeleteQueueRequestCalls() []struct {
	DeleteQueueInput *sqs.DeleteQueueInput
} {
	var calls []struct {
		DeleteQueueInput *sqs.DeleteQueueInput
	}
	mock.lockDeleteQueueRequest.RLock()
	calls = mock.calls.DeleteQueueRequest
	mock.lockDeleteQueueRequest.RUnlock()
	return calls
}

// DeleteQueueWithContext calls DeleteQueueWithContextFunc.
func (mock *SQSAPIMock) DeleteQueueWithContext(contextMoqParam context.Context, deleteQueueInput *sqs.DeleteQueueInput, options ...request.Option) (*sqs.DeleteQueueOutput, error) {
	if mock.DeleteQueueWithContextFunc == nil {
		panic("SQSAPIMock.DeleteQueueWithContextFunc: method is nil but SQSAPI.DeleteQueueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		DeleteQueueInput *sqs.DeleteQueueInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		DeleteQueueInput: deleteQueueInput,
		Options:          options,
	}
	mock.lockDeleteQueueWithContext.Lock()
	mock.calls.DeleteQueueWithContext = append(mock.calls.DeleteQueueWithContext, callInfo)
	mock.lockDeleteQueueWithContext.Unlock()
	return mock.DeleteQueueWithContextFunc(contextMoqParam, deleteQueueInput, options...)
}

// DeleteQueueWithContextCalls gets all the calls that were made to DeleteQueueWithContext.
// Check the length with:
//     len(mockedSQSAPI.DeleteQueueWithContextCalls())
func (mock *SQSAPIMock) DeleteQueueWithContextCalls() []struct {
	ContextMoqParam  context.Context
	DeleteQueueInput *sqs.DeleteQueueInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		DeleteQueueInput *sqs.DeleteQueueInput
		Options          []request.Option
	}
	mock.lockDeleteQueueWithContext.RLock()
	calls = mock.calls.DeleteQueueWithContext
	mock.lockDeleteQueueWithContext.RUnlock()
	return calls
}

// GetQueueAttributes calls GetQueueAttributesFunc.
func (mock *SQSAPIMock) GetQueueAttributes(getQueueAttributesInput *sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error) {
	if mock.GetQueueAttributesFunc == nil {
		panic("SQSAPIMock.GetQueueAttributesFunc: method is nil but SQSAPI.GetQueueAttributes was just called")
	}
	callInfo := struct {
		GetQueueAttributesInput *sqs.GetQueueAttributesInput
	}{
		GetQueueAttributesInput: getQueueAttributesInput,
	}
	mock.lockGetQueueAttributes.Lock()
	mock.calls.GetQueueAttributes = append(mock.calls.GetQueueAttributes, callInfo)
	mock.lockGetQueueAttributes.Unlock()
	return mock.GetQueueAttributesFunc(getQueueAttributesInput)
}

// GetQueueAttributesCalls gets all the calls that were made to GetQueueAttributes.
// Check the length with:
//     len(mockedSQSAPI.GetQueueAttributesCalls())
func (mock *SQSAPIMock) GetQueueAttributesCalls() []struct {
	GetQueueAttributesInput *sqs.GetQueueAttributesInput
} {
	var calls []struct {
		GetQueueAttributesInput *sqs.GetQueueAttributesInput
	}
	mock.lockGetQueueAttributes.RLock()
	calls = mock.calls.GetQueueAttributes
	mock.lockGetQueueAttributes.RUnlock()
	return calls
}

// GetQueueAttributesRequest calls GetQueueAttributesRequestFunc.
func (mock *SQSAPIMock) GetQueueAttributesRequest(getQueueAttributesInput *sqs.GetQueueAttributesInput) (*request.Request, *sqs.GetQueueAttributesOutput) {
	if mock.GetQueueAttributesRequestFunc == nil {
		panic("SQSAPIMock.GetQueueAttributesRequestFunc: method is nil but SQSAPI.GetQueueAttributesRequest was just called")
	}
	callInfo := struct {
		GetQueueAttributesInput *sqs.GetQueueAttributesInput
	}{
		GetQueueAttributesInput: getQueueAttributesInput,
	}
	mock.lockGetQueueAttributesRequest.Lock()
	mock.calls.GetQueueAttributesRequest = append(mock.calls.GetQueueAttributesRequest, callInfo)
	mock.lockGetQueueAttributesRequest.Unlock()
	return mock.GetQueueAttributesRequestFunc(getQueueAttributesInput)
}

// GetQueueAttributesRequestCalls gets all the calls that were made to GetQueueAttributesRequest.
// Check the length with:
//     len(mockedSQSAPI.GetQueueAttributesRequestCalls())
func (mock *SQSAPIMock) GetQueueAttributesRequestCalls() []struct {
	GetQueueAttributesInput *sqs.GetQueueAttributesInput
} {
	var calls []struct {
		GetQueueAttributesInput *sqs.GetQueueAttributesInput
	}
	mock.lockGetQueueAttributesRequest.RLock()
	calls = mock.calls.GetQueueAttributesRequest
	mock.lockGetQueueAttributesRequest.RUnlock()
	return calls
}

// GetQueueAttributesWithContext calls GetQueueAttributesWithContextFunc.
func (mock *SQSAPIMock) GetQueueAttributesWithContext(contextMoqParam context.Context, getQueueAttributesInput *sqs.GetQueueAttributesInput, options ...request.Option) (*sqs.GetQueueAttributesOutput, error) {
	if mock.GetQueueAttributesWithContextFunc == nil {
		panic("SQSAPIMock.GetQueueAttributesWithContextFunc: method is nil but SQSAPI.GetQueueAttributesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetQueueAttributesInput *sqs.GetQueueAttributesInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		GetQueueAttributesInput: getQueueAttributesInput,
		Options:                 options,
	}
	mock.lockGetQueueAttributesWithContext.Lock()
	mock.calls.GetQueueAttributesWithContext = append(mock.calls.GetQueueAttributesWithContext, callInfo)
	mock.lockGetQueueAttributesWithContext.Unlock()
	return mock.GetQueueAttributesWithContextFunc(contextMoqParam, getQueueAttributesInput, options...)
}

// GetQueueAttributesWithContextCalls gets all the calls that were made to GetQueueAttributesWithContext.
// Check the length with:
//     len(mockedSQSAPI.GetQueueAttributesWithContextCalls())
func (mock *SQSAPIMock) GetQueueAttributesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetQueueAttributesInput *sqs.GetQueueAttributesInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetQueueAttributesInput *sqs.GetQueueAttributesInput
		Options                 []request.Option
	}
	mock.lockGetQueueAttributesWithContext.RLock()
	calls = mock.calls.GetQueueAttributesWithContext
	mock.lockGetQueueAttributesWithContext.RUnlock()
	return calls
}

// GetQueueUrl calls GetQueueUrlFunc.
func (mock *SQSAPIMock) GetQueueUrl(getQueueUrlInput *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {
	if mock.GetQueueUrlFunc == nil {
		panic("SQSAPIMock.GetQueueUrlFunc: method is nil but SQSAPI.GetQueueUrl was just called")
	}
	callInfo := struct {
		GetQueueUrlInput *sqs.GetQueueUrlInput
	}{
		GetQueueUrlInput: getQueueUrlInput,
	}
	mock.lockGetQueueUrl.Lock()
	mock.calls.GetQueueUrl = append(mock.calls.GetQueueUrl, callInfo)
	mock.lockGetQueueUrl.Unlock()
	return mock.GetQueueUrlFunc(getQueueUrlInput)
}

// GetQueueUrlCalls gets all the calls that were made to GetQueueUrl.
// Check the length with:
//     len(mockedSQSAPI.GetQueueUrlCalls())
func (mock *SQSAPIMock) GetQueueUrlCalls() []struct {
	GetQueueUrlInput *sqs.GetQueueUrlInput
} {
	var calls []struct {
		GetQueueUrlInput *sqs.GetQueueUrlInput
	}
	mock.lockGetQueueUrl.RLock()
	calls = mock.calls.GetQueueUrl
	mock.lockGetQueueUrl.RUnlock()
	return calls
}

// GetQueueUrlRequest calls GetQueueUrlRequestFunc.
func (mock *SQSAPIMock) GetQueueUrlRequest(getQueueUrlInput *sqs.GetQueueUrlInput) (*request.Request, *sqs.GetQueueUrlOutput) {
	if mock.GetQueueUrlRequestFunc == nil {
		panic("SQSAPIMock.GetQueueUrlRequestFunc: method is nil but SQSAPI.GetQueueUrlRequest was just called")
	}
	callInfo := struct {
		GetQueueUrlInput *sqs.GetQueueUrlInput
	}{
		GetQueueUrlInput: getQueueUrlInput,
	}
	mock.lockGetQueueUrlRequest.Lock()
	mock.calls.GetQueueUrlRequest = append(mock.calls.GetQueueUrlRequest, callInfo)
	mock.lockGetQueueUrlRequest.Unlock()
	return mock.GetQueueUrlRequestFunc(getQueueUrlInput)
}

// GetQueueUrlRequestCalls gets all the calls that were made to GetQueueUrlRequest.
// Check the length with:
//     len(mockedSQSAPI.GetQueueUrlRequestCalls())
func (mock *SQSAPIMock) GetQueueUrlRequestCalls() []struct {
	GetQueueUrlInput *sqs.GetQueueUrlInput
} {
	var calls []struct {
		GetQueueUrlInput *sqs.GetQueueUrlInput
	}
	mock.lockGetQueueUrlRequest.RLock()
	calls = mock.calls.GetQueueUrlRequest
	mock.lockGetQueueUrlRequest.RUnlock()
	return calls
}

// GetQueueUrlWithContext calls GetQueueUrlWithContextFunc.
func (mock *SQSAPIMock) GetQueueUrlWithContext(contextMoqParam context.Context, getQueueUrlInput *sqs.GetQueueUrlInput, options ...request.Option) (*sqs.GetQueueUrlOutput, error) {
	if mock.GetQueueUrlWithContextFunc == nil {
		panic("SQSAPIMock.GetQueueUrlWithContextFunc: method is nil but SQSAPI.GetQueueUrlWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		GetQueueUrlInput *sqs.GetQueueUrlInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		GetQueueUrlInput: getQueueUrlInput,
		Options:          options,
	}
	mock.lockGetQueueUrlWithContext.Lock()
	mock.calls.GetQueueUrlWithContext = append(mock.calls.GetQueueUrlWithContext, callInfo)
	mock.lockGetQueueUrlWithContext.Unlock()
	return mock.GetQueueUrlWithContextFunc(contextMoqParam, getQueueUrlInput, options...)
}

// GetQueueUrlWithContextCalls gets all the calls that were made to GetQueueUrlWithContext.
// Check the length with:
//     len(mockedSQSAPI.GetQueueUrlWithContextCalls())
func (mock *SQSAPIMock) GetQueueUrlWithContextCalls() []struct {
	ContextMoqParam  context.Context
	GetQueueUrlInput *sqs.GetQueueUrlInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		GetQueueUrlInput *sqs.GetQueueUrlInput
		Options          []request.Option
	}
	mock.lockGetQueueUrlWithContext.RLock()
	calls = mock.calls.GetQueueUrlWithContext
	mock.lockGetQueueUrlWithContext.RUnlock()
	return calls
}

// ListDeadLetterSourceQueues calls ListDeadLetterSourceQueuesFunc.
func (mock *SQSAPIMock) ListDeadLetterSourceQueues(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	if mock.ListDeadLetterSourceQueuesFunc == nil {
		panic("SQSAPIMock.ListDeadLetterSourceQueuesFunc: method is nil but SQSAPI.ListDeadLetterSourceQueues was just called")
	}
	callInfo := struct {
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	}{
		ListDeadLetterSourceQueuesInput: listDeadLetterSourceQueuesInput,
	}
	mock.lockListDeadLetterSourceQueues.Lock()
	mock.calls.ListDeadLetterSourceQueues = append(mock.calls.ListDeadLetterSourceQueues, callInfo)
	mock.lockListDeadLetterSourceQueues.Unlock()
	return mock.ListDeadLetterSourceQueuesFunc(listDeadLetterSourceQueuesInput)
}

// ListDeadLetterSourceQueuesCalls gets all the calls that were made to ListDeadLetterSourceQueues.
// Check the length with:
//     len(mockedSQSAPI.ListDeadLetterSourceQueuesCalls())
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesCalls() []struct {
	ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
} {
	var calls []struct {
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	}
	mock.lockListDeadLetterSourceQueues.RLock()
	calls = mock.calls.ListDeadLetterSourceQueues
	mock.lockListDeadLetterSourceQueues.RUnlock()
	return calls
}

// ListDeadLetterSourceQueuesPages calls ListDeadLetterSourceQueuesPagesFunc.
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesPages(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool) error {
	if mock.ListDeadLetterSourceQueuesPagesFunc == nil {
		panic("SQSAPIMock.ListDeadLetterSourceQueuesPagesFunc: method is nil but SQSAPI.ListDeadLetterSourceQueuesPages was just called")
	}
	callInfo := struct {
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		Fn                              func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
	}{
		ListDeadLetterSourceQueuesInput: listDeadLetterSourceQueuesInput,
		Fn:                              fn,
	}
	mock.lockListDeadLetterSourceQueuesPages.Lock()
	mock.calls.ListDeadLetterSourceQueuesPages = append(mock.calls.ListDeadLetterSourceQueuesPages, callInfo)
	mock.lockListDeadLetterSourceQueuesPages.Unlock()
	return mock.ListDeadLetterSourceQueuesPagesFunc(listDeadLetterSourceQueuesInput, fn)
}

// ListDeadLetterSourceQueuesPagesCalls gets all the calls that were made to ListDeadLetterSourceQueuesPages.
// Check the length with:
//     len(mockedSQSAPI.ListDeadLetterSourceQueuesPagesCalls())
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesPagesCalls() []struct {
	ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	Fn                              func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
} {
	var calls []struct {
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		Fn                              func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
	}
	mock.lockListDeadLetterSourceQueuesPages.RLock()
	calls = mock.calls.ListDeadLetterSourceQueuesPages
	mock.lockListDeadLetterSourceQueuesPages.RUnlock()
	return calls
}

// ListDeadLetterSourceQueuesPagesWithContext calls ListDeadLetterSourceQueuesPagesWithContextFunc.
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesPagesWithContext(contextMoqParam context.Context, listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, fn func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool, options ...request.Option) error {
	if mock.ListDeadLetterSourceQueuesPagesWithContextFunc == nil {
		panic("SQSAPIMock.ListDeadLetterSourceQueuesPagesWithContextFunc: method is nil but SQSAPI.ListDeadLetterSourceQueuesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		Fn                              func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		ListDeadLetterSourceQueuesInput: listDeadLetterSourceQueuesInput,
		Fn:                              fn,
		Options:                         options,
	}
	mock.lockListDeadLetterSourceQueuesPagesWithContext.Lock()
	mock.calls.ListDeadLetterSourceQueuesPagesWithContext = append(mock.calls.ListDeadLetterSourceQueuesPagesWithContext, callInfo)
	mock.lockListDeadLetterSourceQueuesPagesWithContext.Unlock()
	return mock.ListDeadLetterSourceQueuesPagesWithContextFunc(contextMoqParam, listDeadLetterSourceQueuesInput, fn, options...)
}

// ListDeadLetterSourceQueuesPagesWithContextCalls gets all the calls that were made to ListDeadLetterSourceQueuesPagesWithContext.
// Check the length with:
//     len(mockedSQSAPI.ListDeadLetterSourceQueuesPagesWithContextCalls())
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesPagesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	Fn                              func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		Fn                              func(*sqs.ListDeadLetterSourceQueuesOutput, bool) bool
		Options                         []request.Option
	}
	mock.lockListDeadLetterSourceQueuesPagesWithContext.RLock()
	calls = mock.calls.ListDeadLetterSourceQueuesPagesWithContext
	mock.lockListDeadLetterSourceQueuesPagesWithContext.RUnlock()
	return calls
}

// ListDeadLetterSourceQueuesRequest calls ListDeadLetterSourceQueuesRequestFunc.
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesRequest(listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput) (*request.Request, *sqs.ListDeadLetterSourceQueuesOutput) {
	if mock.ListDeadLetterSourceQueuesRequestFunc == nil {
		panic("SQSAPIMock.ListDeadLetterSourceQueuesRequestFunc: method is nil but SQSAPI.ListDeadLetterSourceQueuesRequest was just called")
	}
	callInfo := struct {
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	}{
		ListDeadLetterSourceQueuesInput: listDeadLetterSourceQueuesInput,
	}
	mock.lockListDeadLetterSourceQueuesRequest.Lock()
	mock.calls.ListDeadLetterSourceQueuesRequest = append(mock.calls.ListDeadLetterSourceQueuesRequest, callInfo)
	mock.lockListDeadLetterSourceQueuesRequest.Unlock()
	return mock.ListDeadLetterSourceQueuesRequestFunc(listDeadLetterSourceQueuesInput)
}

// ListDeadLetterSourceQueuesRequestCalls gets all the calls that were made to ListDeadLetterSourceQueuesRequest.
// Check the length with:
//     len(mockedSQSAPI.ListDeadLetterSourceQueuesRequestCalls())
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesRequestCalls() []struct {
	ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
} {
	var calls []struct {
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	}
	mock.lockListDeadLetterSourceQueuesRequest.RLock()
	calls = mock.calls.ListDeadLetterSourceQueuesRequest
	mock.lockListDeadLetterSourceQueuesRequest.RUnlock()
	return calls
}

// ListDeadLetterSourceQueuesWithContext calls ListDeadLetterSourceQueuesWithContextFunc.
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesWithContext(contextMoqParam context.Context, listDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput, options ...request.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error) {
	if mock.ListDeadLetterSourceQueuesWithContextFunc == nil {
		panic("SQSAPIMock.ListDeadLetterSourceQueuesWithContextFunc: method is nil but SQSAPI.ListDeadLetterSourceQueuesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		ListDeadLetterSourceQueuesInput: listDeadLetterSourceQueuesInput,
		Options:                         options,
	}
	mock.lockListDeadLetterSourceQueuesWithContext.Lock()
	mock.calls.ListDeadLetterSourceQueuesWithContext = append(mock.calls.ListDeadLetterSourceQueuesWithContext, callInfo)
	mock.lockListDeadLetterSourceQueuesWithContext.Unlock()
	return mock.ListDeadLetterSourceQueuesWithContextFunc(contextMoqParam, listDeadLetterSourceQueuesInput, options...)
}

// ListDeadLetterSourceQueuesWithContextCalls gets all the calls that were made to ListDeadLetterSourceQueuesWithContext.
// Check the length with:
//     len(mockedSQSAPI.ListDeadLetterSourceQueuesWithContextCalls())
func (mock *SQSAPIMock) ListDeadLetterSourceQueuesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		ListDeadLetterSourceQueuesInput *sqs.ListDeadLetterSourceQueuesInput
		Options                         []request.Option
	}
	mock.lockListDeadLetterSourceQueuesWithContext.RLock()
	calls = mock.calls.ListDeadLetterSourceQueuesWithContext
	mock.lockListDeadLetterSourceQueuesWithContext.RUnlock()
	return calls
}

// ListQueueTags calls ListQueueTagsFunc.
func (mock *SQSAPIMock) ListQueueTags(listQueueTagsInput *sqs.ListQueueTagsInput) (*sqs.ListQueueTagsOutput, error) {
	if mock.ListQueueTagsFunc == nil {
		panic("SQSAPIMock.ListQueueTagsFunc: method is nil but SQSAPI.ListQueueTags was just called")
	}
	callInfo := struct {
		ListQueueTagsInput *sqs.ListQueueTagsInput
	}{
		ListQueueTagsInput: listQueueTagsInput,
	}
	mock.lockListQueueTags.Lock()
	mock.calls.ListQueueTags = append(mock.calls.ListQueueTags, callInfo)
	mock.lockListQueueTags.Unlock()
	return mock.ListQueueTagsFunc(listQueueTagsInput)
}

// ListQueueTagsCalls gets all the calls that were made to ListQueueTags.
// Check the length with:
//     len(mockedSQSAPI.ListQueueTagsCalls())
func (mock *SQSAPIMock) ListQueueTagsCalls() []struct {
	ListQueueTagsInput *sqs.ListQueueTagsInput
} {
	var calls []struct {
		ListQueueTagsInput *sqs.ListQueueTagsInput
	}
	mock.lockListQueueTags.RLock()
	calls = mock.calls.ListQueueTags
	mock.lockListQueueTags.RUnlock()
	return calls
}

// ListQueueTagsRequest calls ListQueueTagsRequestFunc.
func (mock *SQSAPIMock) ListQueueTagsRequest(listQueueTagsInput *sqs.ListQueueTagsInput) (*request.Request, *sqs.ListQueueTagsOutput) {
	if mock.ListQueueTagsRequestFunc == nil {
		panic("SQSAPIMock.ListQueueTagsRequestFunc: method is nil but SQSAPI.ListQueueTagsRequest was just called")
	}
	callInfo := struct {
		ListQueueTagsInput *sqs.ListQueueTagsInput
	}{
		ListQueueTagsInput: listQueueTagsInput,
	}
	mock.lockListQueueTagsRequest.Lock()
	mock.calls.ListQueueTagsRequest = append(mock.calls.ListQueueTagsRequest, callInfo)
	mock.lockListQueueTagsRequest.Unlock()
	return mock.ListQueueTagsRequestFunc(listQueueTagsInput)
}

// ListQueueTagsRequestCalls gets all the calls that were made to ListQueueTagsRequest.
// Check the length with:
//     len(mockedSQSAPI.ListQueueTagsRequestCalls())
func (mock *SQSAPIMock) ListQueueTagsRequestCalls() []struct {
	ListQueueTagsInput *sqs.ListQueueTagsInput
} {
	var calls []struct {
		ListQueueTagsInput *sqs.ListQueueTagsInput
	}
	mock.lockListQueueTagsRequest.RLock()
	calls = mock.calls.ListQueueTagsRequest
	mock.lockListQueueTagsRequest.RUnlock()
	return calls
}

// ListQueueTagsWithContext calls ListQueueTagsWithContextFunc.
func (mock *SQSAPIMock) ListQueueTagsWithContext(contextMoqParam context.Context, listQueueTagsInput *sqs.ListQueueTagsInput, options ...request.Option) (*sqs.ListQueueTagsOutput, error) {
	if mock.ListQueueTagsWithContextFunc == nil {
		panic("SQSAPIMock.ListQueueTagsWithContextFunc: method is nil but SQSAPI.ListQueueTagsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		ListQueueTagsInput *sqs.ListQueueTagsInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		ListQueueTagsInput: listQueueTagsInput,
		Options:            options,
	}
	mock.lockListQueueTagsWithContext.Lock()
	mock.calls.ListQueueTagsWithContext = append(mock.calls.ListQueueTagsWithContext, callInfo)
	mock.lockListQueueTagsWithContext.Unlock()
	return mock.ListQueueTagsWithContextFunc(contextMoqParam, listQueueTagsInput, options...)
}

// ListQueueTagsWithContextCalls gets all the calls that were made to ListQueueTagsWithContext.
// Check the length with:
//     len(mockedSQSAPI.ListQueueTagsWithContextCalls())
func (mock *SQSAPIMock) ListQueueTagsWithContextCalls() []struct {
	ContextMoqParam    context.Context
	ListQueueTagsInput *sqs.ListQueueTagsInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		ListQueueTagsInput *sqs.ListQueueTagsInput
		Options            []request.Option
	}
	mock.lockListQueueTagsWithContext.RLock()
	calls = mock.calls.ListQueueTagsWithContext
	mock.lockListQueueTagsWithContext.RUnlock()
	return calls
}

// ListQueues calls ListQueuesFunc.
func (mock *SQSAPIMock) ListQueues(listQueuesInput *sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error) {
	if mock.ListQueuesFunc == nil {
		panic("SQSAPIMock.ListQueuesFunc: method is nil but SQSAPI.ListQueues was just called")
	}
	callInfo := struct {
		ListQueuesInput *sqs.ListQueuesInput
	}{
		ListQueuesInput: listQueuesInput,
	}
	mock.lockListQueues.Lock()
	mock.calls.ListQueues = append(mock.calls.ListQueues, callInfo)
	mock.lockListQueues.Unlock()
	return mock.ListQueuesFunc(listQueuesInput)
}

// ListQueuesCalls gets all the calls that were made to ListQueues.
// Check the length with:
//     len(mockedSQSAPI.ListQueuesCalls())
func (mock *SQSAPIMock) ListQueuesCalls() []struct {
	ListQueuesInput *sqs.ListQueuesInput
} {
	var calls []struct {
		ListQueuesInput *sqs.ListQueuesInput
	}
	mock.lockListQueues.RLock()
	calls = mock.calls.ListQueues
	mock.lockListQueues.RUnlock()
	return calls
}

// ListQueuesPages calls ListQueuesPagesFunc.
func (mock *SQSAPIMock) ListQueuesPages(listQueuesInput *sqs.ListQueuesInput, fn func(*sqs.ListQueuesOutput, bool) bool) error {
	if mock.ListQueuesPagesFunc == nil {
		panic("SQSAPIMock.ListQueuesPagesFunc: method is nil but SQSAPI.ListQueuesPages was just called")
	}
	callInfo := struct {
		ListQueuesInput *sqs.ListQueuesInput
		Fn              func(*sqs.ListQueuesOutput, bool) bool
	}{
		ListQueuesInput: listQueuesInput,
		Fn:              fn,
	}
	mock.lockListQueuesPages.Lock()
	mock.calls.ListQueuesPages = append(mock.calls.ListQueuesPages, callInfo)
	mock.lockListQueuesPages.Unlock()
	return mock.ListQueuesPagesFunc(listQueuesInput, fn)
}

// ListQueuesPagesCalls gets all the calls that were made to ListQueuesPages.
// Check the length with:
//     len(mockedSQSAPI.ListQueuesPagesCalls())
func (mock *SQSAPIMock) ListQueuesPagesCalls() []struct {
	ListQueuesInput *sqs.ListQueuesInput
	Fn              func(*sqs.ListQueuesOutput, bool) bool
} {
	var calls []struct {
		ListQueuesInput *sqs.ListQueuesInput
		Fn              func(*sqs.ListQueuesOutput, bool) bool
	}
	mock.lockListQueuesPages.RLock()
	calls = mock.calls.ListQueuesPages
	mock.lockListQueuesPages.RUnlock()
	return calls
}

// ListQueuesPagesWithContext calls ListQueuesPagesWithContextFunc.
func (mock *SQSAPIMock) ListQueuesPagesWithContext(contextMoqParam context.Context, listQueuesInput *sqs.ListQueuesInput, fn func(*sqs.ListQueuesOutput, bool) bool, options ...request.Option) error {
	if mock.ListQueuesPagesWithContextFunc == nil {
		panic("SQSAPIMock.ListQueuesPagesWithContextFunc: method is nil but SQSAPI.ListQueuesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListQueuesInput *sqs.ListQueuesInput
		Fn              func(*sqs.ListQueuesOutput, bool) bool
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListQueuesInput: listQueuesInput,
		Fn:              fn,
		Options:         options,
	}
	mock.lockListQueuesPagesWithContext.Lock()
	mock.calls.ListQueuesPagesWithContext = append(mock.calls.ListQueuesPagesWithContext, callInfo)
	mock.lockListQueuesPagesWithContext.Unlock()
	return mock.ListQueuesPagesWithContextFunc(contextMoqParam, listQueuesInput, fn, options...)
}

// ListQueuesPagesWithContextCalls gets all the calls that were made to ListQueuesPagesWithContext.
// Check the length with:
//     len(mockedSQSAPI.ListQueuesPagesWithContextCalls())
func (mock *SQSAPIMock) ListQueuesPagesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListQueuesInput *sqs.ListQueuesInput
	Fn              func(*sqs.ListQueuesOutput, bool) bool
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListQueuesInput *sqs.ListQueuesInput
		Fn              func(*sqs.ListQueuesOutput, bool) bool
		Options         []request.Option
	}
	mock.lockListQueuesPagesWithContext.RLock()
	calls = mock.calls.ListQueuesPagesWithContext
	mock.lockListQueuesPagesWithContext.RUnlock()
	return calls
}

// ListQueuesRequest calls ListQueuesRequestFunc.
func (mock *SQSAPIMock) ListQueuesRequest(listQueuesInput *sqs.ListQueuesInput) (*request.Request, *sqs.ListQueuesOutput) {
	if mock.ListQueuesRequestFunc == nil {
		panic("SQSAPIMock.ListQueuesRequestFunc: method is nil but SQSAPI.ListQueuesRequest was just called")
	}
	callInfo := struct {
		ListQueuesInput *sqs.ListQueuesInput
	}{
		ListQueuesInput: listQueuesInput,
	}
	mock.lockListQueuesRequest.Lock()
	mock.calls.ListQueuesRequest = append(mock.calls.ListQueuesRequest, callInfo)
	mock.lockListQueuesRequest.Unlock()
	return mock.ListQueuesRequestFunc(listQueuesInput)
}

// ListQueuesRequestCalls gets all the calls that were made to ListQueuesRequest.
// Check the length with:
//     len(mockedSQSAPI.ListQueuesRequestCalls())
func (mock *SQSAPIMock) ListQueuesRequestCalls() []struct {
	ListQueuesInput *sqs.ListQueuesInput
} {
	var calls []struct {
		ListQueuesInput *sqs.ListQueuesInput
	}
	mock.lockListQueuesRequest.RLock()
	calls = mock.calls.ListQueuesRequest
	mock.lockListQueuesRequest.RUnlock()
	return calls
}

// ListQueuesWithContext calls ListQueuesWithContextFunc.
func (mock *SQSAPIMock) ListQueuesWithContext(contextMoqParam context.Context, listQueuesInput *sqs.ListQueuesInput, options ...request.Option) (*sqs.ListQueuesOutput, error) {
	if mock.ListQueuesWithContextFunc == nil {
		panic("SQSAPIMock.ListQueuesWithContextFunc: method is nil but SQSAPI.ListQueuesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListQueuesInput *sqs.ListQueuesInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListQueuesInput: listQueuesInput,
		Options:         options,
	}
	mock.lockListQueuesWithContext.Lock()
	mock.calls.ListQueuesWithContext = append(mock.calls.ListQueuesWithContext, callInfo)
	mock.lockListQueuesWithContext.Unlock()
	return mock.ListQueuesWithContextFunc(contextMoqParam, listQueuesInput, options...)
}

// ListQueuesWithContextCalls gets all the calls that were made to ListQueuesWithContext.
// Check the length with:
//     len(mockedSQSAPI.ListQueuesWithContextCalls())
func (mock *SQSAPIMock) ListQueuesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListQueuesInput *sqs.ListQueuesInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListQueuesInput *sqs.ListQueuesInput
		Options         []request.Option
	}
	mock.lockListQueuesWithContext.RLock()
	calls = mock.calls.ListQueuesWithContext
	mock.lockListQueuesWithContext.RUnlock()
	return calls
}

// PurgeQueue calls PurgeQueueFunc.
func (mock *SQSAPIMock) PurgeQueue(purgeQueueInput *sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error) {
	if mock.PurgeQueueFunc == nil {
		panic("SQSAPIMock.PurgeQueueFunc: method is nil but SQSAPI.PurgeQueue was just called")
	}
	callInfo := struct {
		PurgeQueueInput *sqs.PurgeQueueInput
	}{
		PurgeQueueInput: purgeQueueInput,
	}
	mock.lockPurgeQueue.Lock()
	mock.calls.PurgeQueue = append(mock.calls.PurgeQueue, callInfo)
	mock.lockPurgeQueue.Unlock()
	return mock.PurgeQueueFunc(purgeQueueInput)
}

// PurgeQueueCalls gets all the calls that were made to PurgeQueue.
// Check the length with:
//     len(mockedSQSAPI.PurgeQueueCalls())
func (mock *SQSAPIMock) PurgeQueueCalls() []struct {
	PurgeQueueInput *sqs.PurgeQueueInput
} {
	var calls []struct {
		PurgeQueueInput *sqs.PurgeQueueInput
	}
	mock.lockPurgeQueue.RLock()
	calls = mock.calls.PurgeQueue
	mock.lockPurgeQueue.RUnlock()
	return calls
}

// PurgeQueueRequest calls PurgeQueueRequestFunc.
func (mock *SQSAPIMock) PurgeQueueRequest(purgeQueueInput *sqs.PurgeQueueInput) (*request.Request, *sqs.PurgeQueueOutput) {
	if mock.PurgeQueueRequestFunc == nil {
		panic("SQSAPIMock.PurgeQueueRequestFunc: method is nil but SQSAPI.PurgeQueueRequest was just called")
	}
	callInfo := struct {
		PurgeQueueInput *sqs.PurgeQueueInput
	}{
		PurgeQueueInput: purgeQueueInput,
	}
	mock.lockPurgeQueueRequest.Lock()
	mock.calls.PurgeQueueRequest = append(mock.calls.PurgeQueueRequest, callInfo)
	mock.lockPurgeQueueRequest.Unlock()
	return mock.PurgeQueueRequestFunc(purgeQueueInput)
}

// PurgeQueueRequestCalls gets all the calls that were made to PurgeQueueRequest.
// Check the length with:
//     len(mockedSQSAPI.PurgeQueueRequestCalls())
func (mock *SQSAPIMock) PurgeQueueRequestCalls() []struct {
	PurgeQueueInput *sqs.PurgeQueueInput
} {
	var calls []struct {
		PurgeQueueInput *sqs.PurgeQueueInput
	}
	mock.lockPurgeQueueRequest.RLock()
	calls = mock.calls.PurgeQueueRequest
	mock.lockPurgeQueueRequest.RUnlock()
	return calls
}

// PurgeQueueWithContext calls PurgeQueueWithContextFunc.
func (mock *SQSAPIMock) PurgeQueueWithContext(contextMoqParam context.Context, purgeQueueInput *sqs.PurgeQueueInput, options ...request.Option) (*sqs.PurgeQueueOutput, error) {
	if mock.PurgeQueueWithContextFunc == nil {
		panic("SQSAPIMock.PurgeQueueWithContextFunc: method is nil but SQSAPI.PurgeQueueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		PurgeQueueInput *sqs.PurgeQueueInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		PurgeQueueInput: purgeQueueInput,
		Options:         options,
	}
	mock.lockPurgeQueueWithContext.Lock()
	mock.calls.PurgeQueueWithContext = append(mock.calls.PurgeQueueWithContext, callInfo)
	mock.lockPurgeQueueWithContext.Unlock()
	return mock.PurgeQueueWithContextFunc(contextMoqParam, purgeQueueInput, options...)
}

// PurgeQueueWithContextCalls gets all the calls that were made to PurgeQueueWithContext.
// Check the length with:
//     len(mockedSQSAPI.PurgeQueueWithContextCalls())
func (mock *SQSAPIMock) PurgeQueueWithContextCalls() []struct {
	ContextMoqParam context.Context
	PurgeQueueInput *sqs.PurgeQueueInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		PurgeQueueInput *sqs.PurgeQueueInput
		Options         []request.Option
	}
	mock.lockPurgeQueueWithContext.RLock()
	calls = mock.calls.PurgeQueueWithContext
	mock.lockPurgeQueueWithContext.RUnlock()
	return calls
}

// ReceiveMessage calls ReceiveMessageFunc.
func (mock *SQSAPIMock) ReceiveMessage(receiveMessageInput *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	if mock.ReceiveMessageFunc == nil {
		panic("SQSAPIMock.ReceiveMessageFunc: method is nil but SQSAPI.ReceiveMessage was just called")
	}
	callInfo := struct {
		ReceiveMessageInput *sqs.ReceiveMessageInput
	}{
		ReceiveMessageInput: receiveMessageInput,
	}
	mock.lockReceiveMessage.Lock()
	mock.calls.ReceiveMessage = append(mock.calls.ReceiveMessage, callInfo)
	mock.lockReceiveMessage.Unlock()
	return mock.ReceiveMessageFunc(receiveMessageInput)
}

// ReceiveMessageCalls gets all the calls that were made to ReceiveMessage.
// Check the length with:
//     len(mockedSQSAPI.ReceiveMessageCalls())
func (mock *SQSAPIMock) ReceiveMessageCalls() []struct {
	ReceiveMessageInput *sqs.ReceiveMessageInput
} {
	var calls []struct {
		ReceiveMessageInput *sqs.ReceiveMessageInput
	}
	mock.lockReceiveMessage.RLock()
	calls = mock.calls.ReceiveMessage
	mock.lockReceiveMessage.RUnlock()
	return calls
}

// ReceiveMessageRequest calls ReceiveMessageRequestFunc.
func (mock *SQSAPIMock) ReceiveMessageRequest(receiveMessageInput *sqs.ReceiveMessageInput) (*request.Request, *sqs.ReceiveMessageOutput) {
	if mock.ReceiveMessageRequestFunc == nil {
		panic("SQSAPIMock.ReceiveMessageRequestFunc: method is nil but SQSAPI.ReceiveMessageRequest was just called")
	}
	callInfo := struct {
		ReceiveMessageInput *sqs.ReceiveMessageInput
	}{
		ReceiveMessageInput: receiveMessageInput,
	}
	mock.lockReceiveMessageRequest.Lock()
	mock.calls.ReceiveMessageRequest = append(mock.calls.ReceiveMessageRequest, callInfo)
	mock.lockReceiveMessageRequest.Unlock()
	return mock.ReceiveMessageRequestFunc(receiveMessageInput)
}

// ReceiveMessageRequestCalls gets all the calls that were made to ReceiveMessageRequest.
// Check the length with:
//     len(mockedSQSAPI.ReceiveMessageRequestCalls())
func (mock *SQSAPIMock) ReceiveMessageRequestCalls() []struct {
	ReceiveMessageInput *sqs.ReceiveMessageInput
} {
	var calls []struct {
		ReceiveMessageInput *sqs.ReceiveMessageInput
	}
	mock.lockReceiveMessageRequest.RLock()
	calls = mock.calls.ReceiveMessageRequest
	mock.lockReceiveMessageRequest.RUnlock()
	return calls
}

// ReceiveMessageWithContext calls ReceiveMessageWithContextFunc.
func (mock *SQSAPIMock) ReceiveMessageWithContext(contextMoqParam context.Context, receiveMessageInput *sqs.ReceiveMessageInput, options ...request.Option) (*sqs.ReceiveMessageOutput, error) {
	if mock.ReceiveMessageWithContextFunc == nil {
		panic("SQSAPIMock.ReceiveMessageWithContextFunc: method is nil but SQSAPI.ReceiveMessageWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		ReceiveMessageInput *sqs.ReceiveMessageInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		ReceiveMessageInput: receiveMessageInput,
		Options:             options,
	}
	mock.lockReceiveMessageWithContext.Lock()
	mock.calls.ReceiveMessageWithContext = append(mock.calls.ReceiveMessageWithContext, callInfo)
	mock.lockReceiveMessageWithContext.Unlock()
	return mock.ReceiveMessageWithContextFunc(contextMoqParam, receiveMessageInput, options...)
}

// ReceiveMessageWithContextCalls gets all the calls that were made to ReceiveMessageWithContext.
// Check the length with:
//     len(mockedSQSAPI.ReceiveMessageWithContextCalls())
func (mock *SQSAPIMock) ReceiveMessageWithContextCalls() []struct {
	ContextMoqParam     context.Context
	ReceiveMessageInput *sqs.ReceiveMessageInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		ReceiveMessageInput *sqs.ReceiveMessageInput
		Options             []request.Option
	}
	mock.lockReceiveMessageWithContext.RLock()
	calls = mock.calls.ReceiveMessageWithContext
	mock.lockReceiveMessageWithContext.RUnlock()
	return calls
}

// RemovePermission calls RemovePermissionFunc.
func (mock *SQSAPIMock) RemovePermission(removePermissionInput *sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error) {
	if mock.RemovePermissionFunc == nil {
		panic("SQSAPIMock.RemovePermissionFunc: method is nil but SQSAPI.RemovePermission was just called")
	}
	callInfo := struct {
		RemovePermissionInput *sqs.RemovePermissionInput
	}{
		RemovePermissionInput: removePermissionInput,
	}
	mock.lockRemovePermission.Lock()
	mock.calls.RemovePermission = append(mock.calls.RemovePermission, callInfo)
	mock.lockRemovePermission.Unlock()
	return mock.RemovePermissionFunc(removePermissionInput)
}

// RemovePermissionCalls gets all the calls that were made to RemovePermission.
// Check the length with:
//     len(mockedSQSAPI.RemovePermissionCalls())
func (mock *SQSAPIMock) RemovePermissionCalls() []struct {
	RemovePermissionInput *sqs.RemovePermissionInput
} {
	var calls []struct {
		RemovePermissionInput *sqs.RemovePermissionInput
	}
	mock.lockRemovePermission.RLock()
	calls = mock.calls.RemovePermission
	mock.lockRemovePermission.RUnlock()
	return calls
}

// RemovePermissionRequest calls RemovePermissionRequestFunc.
func (mock *SQSAPIMock) RemovePermissionRequest(removePermissionInput *sqs.RemovePermissionInput) (*request.Request, *sqs.RemovePermissionOutput) {
	if mock.RemovePermissionRequestFunc == nil {
		panic("SQSAPIMock.RemovePermissionRequestFunc: method is nil but SQSAPI.RemovePermissionRequest was just called")
	}
	callInfo := struct {
		RemovePermissionInput *sqs.RemovePermissionInput
	}{
		RemovePermissionInput: removePermissionInput,
	}
	mock.lockRemovePermissionRequest.Lock()
	mock.calls.RemovePermissionRequest = append(mock.calls.RemovePermissionRequest, callInfo)
	mock.lockRemovePermissionRequest.Unlock()
	return mock.RemovePermissionRequestFunc(removePermissionInput)
}

// RemovePermissionRequestCalls gets all the calls that were made to RemovePermissionRequest.
// Check the length with:
//     len(mockedSQSAPI.RemovePermissionRequestCalls())
func (mock *SQSAPIMock) RemovePermissionRequestCalls() []struct {
	RemovePermissionInput *sqs.RemovePermissionInput
} {
	var calls []struct {
		RemovePermissionInput *sqs.RemovePermissionInput
	}
	mock.lockRemovePermissionRequest.RLock()
	calls = mock.calls.RemovePermissionRequest
	mock.lockRemovePermissionRequest.RUnlock()
	return calls
}

// RemovePermissionWithContext calls RemovePermissionWithContextFunc.
func (mock *SQSAPIMock) RemovePermissionWithContext(contextMoqParam context.Context, removePermissionInput *sqs.RemovePermissionInput, options ...request.Option) (*sqs.RemovePermissionOutput, error) {
	if mock.RemovePermissionWithContextFunc == nil {
		panic("SQSAPIMock.RemovePermissionWithContextFunc: method is nil but SQSAPI.RemovePermissionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		RemovePermissionInput *sqs.RemovePermissionInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		RemovePermissionInput: removePermissionInput,
		Options:               options,
	}
	mock.lockRemovePermissionWithContext.Lock()
	mock.calls.RemovePermissionWithContext = append(mock.calls.RemovePermissionWithContext, callInfo)
	mock.lockRemovePermissionWithContext.Unlock()
	return mock.RemovePermissionWithContextFunc(contextMoqParam, removePermissionInput, options...)
}

// RemovePermissionWithContextCalls gets all the calls that were made to RemovePermissionWithContext.
// Check the length with:
//     len(mockedSQSAPI.RemovePermissionWithContextCalls())
func (mock *SQSAPIMock) RemovePermissionWithContextCalls() []struct {
	ContextMoqParam       context.Context
	RemovePermissionInput *sqs.RemovePermissionInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		RemovePermissionInput *sqs.RemovePermissionInput
		Options               []request.Option
	}
	mock.lockRemovePermissionWithContext.RLock()
	calls = mock.calls.RemovePermissionWithContext
	mock.lockRemovePermissionWithContext.RUnlock()
	return calls
}

// SendMessage calls SendMessageFunc.
func (mock *SQSAPIMock) SendMessage(sendMessageInput *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	if mock.SendMessageFunc == nil {
		panic("SQSAPIMock.SendMessageFunc: method is nil but SQSAPI.SendMessage was just called")
	}
	callInfo := struct {
		SendMessageInput *sqs.SendMessageInput
	}{
		SendMessageInput: sendMessageInput,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(sendMessageInput)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//     len(mockedSQSAPI.SendMessageCalls())
func (mock *SQSAPIMock) SendMessageCalls() []struct {
	SendMessageInput *sqs.SendMessageInput
} {
	var calls []struct {
		SendMessageInput *sqs.SendMessageInput
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}

// SendMessageBatch calls SendMessageBatchFunc.
func (mock *SQSAPIMock) SendMessageBatch(sendMessageBatchInput *sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error) {
	if mock.SendMessageBatchFunc == nil {
		panic("SQSAPIMock.SendMessageBatchFunc: method is nil but SQSAPI.SendMessageBatch was just called")
	}
	callInfo := struct {
		SendMessageBatchInput *sqs.SendMessageBatchInput
	}{
		SendMessageBatchInput: sendMessageBatchInput,
	}
	mock.lockSendMessageBatch.Lock()
	mock.calls.SendMessageBatch = append(mock.calls.SendMessageBatch, callInfo)
	mock.lockSendMessageBatch.Unlock()
	return mock.SendMessageBatchFunc(sendMessageBatchInput)
}

// SendMessageBatchCalls gets all the calls that were made to SendMessageBatch.
// Check the length with:
//     len(mockedSQSAPI.SendMessageBatchCalls())
func (mock *SQSAPIMock) SendMessageBatchCalls() []struct {
	SendMessageBatchInput *sqs.SendMessageBatchInput
} {
	var calls []struct {
		SendMessageBatchInput *sqs.SendMessageBatchInput
	}
	mock.lockSendMessageBatch.RLock()
	calls = mock.calls.SendMessageBatch
	mock.lockSendMessageBatch.RUnlock()
	return calls
}

// SendMessageBatchRequest calls SendMessageBatchRequestFunc.
func (mock *SQSAPIMock) SendMessageBatchRequest(sendMessageBatchInput *sqs.SendMessageBatchInput) (*request.Request, *sqs.SendMessageBatchOutput) {
	if mock.SendMessageBatchRequestFunc == nil {
		panic("SQSAPIMock.SendMessageBatchRequestFunc: method is nil but SQSAPI.SendMessageBatchRequest was just called")
	}
	callInfo := struct {
		SendMessageBatchInput *sqs.SendMessageBatchInput
	}{
		SendMessageBatchInput: sendMessageBatchInput,
	}
	mock.lockSendMessageBatchRequest.Lock()
	mock.calls.SendMessageBatchRequest = append(mock.calls.SendMessageBatchRequest, callInfo)
	mock.lockSendMessageBatchRequest.Unlock()
	return mock.SendMessageBatchRequestFunc(sendMessageBatchInput)
}

// SendMessageBatchRequestCalls gets all the calls that were made to SendMessageBatchRequest.
// Check the length with:
//     len(mockedSQSAPI.SendMessageBatchRequestCalls())
func (mock *SQSAPIMock) SendMessageBatchRequestCalls() []struct {
	SendMessageBatchInput *sqs.SendMessageBatchInput
} {
	var calls []struct {
		SendMessageBatchInput *sqs.SendMessageBatchInput
	}
	mock.lockSendMessageBatchRequest.RLock()
	calls = mock.calls.SendMessageBatchRequest
	mock.lockSendMessageBatchRequest.RUnlock()
	return calls
}

// SendMessageBatchWithContext calls SendMessageBatchWithContextFunc.
func (mock *SQSAPIMock) SendMessageBatchWithContext(contextMoqParam context.Context, sendMessageBatchInput *sqs.SendMessageBatchInput, options ...request.Option) (*sqs.SendMessageBatchOutput, error) {
	if mock.SendMessageBatchWithContextFunc == nil {
		panic("SQSAPIMock.SendMessageBatchWithContextFunc: method is nil but SQSAPI.SendMessageBatchWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		SendMessageBatchInput *sqs.SendMessageBatchInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		SendMessageBatchInput: sendMessageBatchInput,
		Options:               options,
	}
	mock.lockSendMessageBatchWithContext.Lock()
	mock.calls.SendMessageBatchWithContext = append(mock.calls.SendMessageBatchWithContext, callInfo)
	mock.lockSendMessageBatchWithContext.Unlock()
	return mock.SendMessageBatchWithContextFunc(contextMoqParam, sendMessageBatchInput, options...)
}

// SendMessageBatchWithContextCalls gets all the calls that were made to SendMessageBatchWithContext.
// Check the length with:
//     len(mockedSQSAPI.SendMessageBatchWithContextCalls())
func (mock *SQSAPIMock) SendMessageBatchWithContextCalls() []struct {
	ContextMoqParam       context.Context
	SendMessageBatchInput *sqs.SendMessageBatchInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		SendMessageBatchInput *sqs.SendMessageBatchInput
		Options               []request.Option
	}
	mock.lockSendMessageBatchWithContext.RLock()
	calls = mock.calls.SendMessageBatchWithContext
	mock.lockSendMessageBatchWithContext.RUnlock()
	return calls
}

// SendMessageRequest calls SendMessageRequestFunc.
func (mock *SQSAPIMock) SendMessageRequest(sendMessageInput *sqs.SendMessageInput) (*request.Request, *sqs.SendMessageOutput) {
	if mock.SendMessageRequestFunc == nil {
		panic("SQSAPIMock.SendMessageRequestFunc: method is nil but SQSAPI.SendMessageRequest was just called")
	}
	callInfo := struct {
		SendMessageInput *sqs.SendMessageInput
	}{
		SendMessageInput: sendMessageInput,
	}
	mock.lockSendMessageRequest.Lock()
	mock.calls.SendMessageRequest = append(mock.calls.SendMessageRequest, callInfo)
	mock.lockSendMessageRequest.Unlock()
	return mock.SendMessageRequestFunc(sendMessageInput)
}

// SendMessageRequestCalls gets all the calls that were made to SendMessageRequest.
// Check the length with:
//     len(mockedSQSAPI.SendMessageRequestCalls())
func (mock *SQSAPIMock) SendMessageRequestCalls() []struct {
	SendMessageInput *sqs.SendMessageInput
} {
	var calls []struct {
		SendMessageInput *sqs.SendMessageInput
	}
	mock.lockSendMessageRequest.RLock()
	calls = mock.calls.SendMessageRequest
	mock.lockSendMessageRequest.RUnlock()
	return calls
}

// SendMessageWithContext calls SendMessageWithContextFunc.
func (mock *SQSAPIMock) SendMessageWithContext(contextMoqParam context.Context, sendMessageInput *sqs.SendMessageInput, options ...request.Option) (*sqs.SendMessageOutput, error) {
	if mock.SendMessageWithContextFunc == nil {
		panic("SQSAPIMock.SendMessageWithContextFunc: method is nil but SQSAPI.SendMessageWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		SendMessageInput *sqs.SendMessageInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		SendMessageInput: sendMessageInput,
		Options:          options,
	}
	mock.lockSendMessageWithContext.Lock()
	mock.calls.SendMessageWithContext = append(mock.calls.SendMessageWithContext, callInfo)
	mock.lockSendMessageWithContext.Unlock()
	return mock.SendMessageWithContextFunc(contextMoqParam, sendMessageInput, options...)
}

// SendMessageWithContextCalls gets all the calls that were made to SendMessageWithContext.
// Check the length with:
//     len(mockedSQSAPI.SendMessageWithContextCalls())
func (mock *SQSAPIMock) SendMessageWithContextCalls() []struct {
	ContextMoqParam  context.Context
	SendMessageInput *sqs.SendMessageInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		SendMessageInput *sqs.SendMessageInput
		Options          []request.Option
	}
	mock.lockSendMessageWithContext.RLock()
	calls = mock.calls.SendMessageWithContext
	mock.lockSendMessageWithContext.RUnlock()
	return calls
}

// SetQueueAttributes calls SetQueueAttributesFunc.
func (mock *SQSAPIMock) SetQueueAttributes(setQueueAttributesInput *sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error) {
	if mock.SetQueueAttributesFunc == nil {
		panic("SQSAPIMock.SetQueueAttributesFunc: method is nil but SQSAPI.SetQueueAttributes was just called")
	}
	callInfo := struct {
		SetQueueAttributesInput *sqs.SetQueueAttributesInput
	}{
		SetQueueAttributesInput: setQueueAttributesInput,
	}
	mock.lockSetQueueAttributes.Lock()
	mock.calls.SetQueueAttributes = append(mock.calls.SetQueueAttributes, callInfo)
	mock.lockSetQueueAttributes.Unlock()
	return mock.SetQueueAttributesFunc(setQueueAttributesInput)
}

// SetQueueAttributesCalls gets all the calls that were made to SetQueueAttributes.
// Check the length with:
//     len(mockedSQSAPI.SetQueueAttributesCalls())
func (mock *SQSAPIMock) SetQueueAttributesCalls() []struct {
	SetQueueAttributesInput *sqs.SetQueueAttributesInput
} {
	var calls []struct {
		SetQueueAttributesInput *sqs.SetQueueAttributesInput
	}
	mock.lockSetQueueAttributes.RLock()
	calls = mock.calls.SetQueueAttributes
	mock.lockSetQueueAttributes.RUnlock()
	return calls
}

// SetQueueAttributesRequest calls SetQueueAttributesRequestFunc.
func (mock *SQSAPIMock) SetQueueAttributesRequest(setQueueAttributesInput *sqs.SetQueueAttributesInput) (*request.Request, *sqs.SetQueueAttributesOutput) {
	if mock.SetQueueAttributesRequestFunc == nil {
		panic("SQSAPIMock.SetQueueAttributesRequestFunc: method is nil but SQSAPI.SetQueueAttributesRequest was just called")
	}
	callInfo := struct {
		SetQueueAttributesInput *sqs.SetQueueAttributesInput
	}{
		SetQueueAttributesInput: setQueueAttributesInput,
	}
	mock.lockSetQueueAttributesRequest.Lock()
	mock.calls.SetQueueAttributesRequest = append(mock.calls.SetQueueAttributesRequest, callInfo)
	mock.lockSetQueueAttributesRequest.Unlock()
	return mock.SetQueueAttributesRequestFunc(setQueueAttributesInput)
}

// SetQueueAttributesRequestCalls gets all the calls that were made to SetQueueAttributesRequest.
// Check the length with:
//     len(mockedSQSAPI.SetQueueAttributesRequestCalls())
func (mock *SQSAPIMock) SetQueueAttributesRequestCalls() []struct {
	SetQueueAttributesInput *sqs.SetQueueAttributesInput
} {
	var calls []struct {
		SetQueueAttributesInput *sqs.SetQueueAttributesInput
	}
	mock.lockSetQueueAttributesRequest.RLock()
	calls = mock.calls.SetQueueAttributesRequest
	mock.lockSetQueueAttributesRequest.RUnlock()
	return calls
}

// SetQueueAttributesWithContext calls SetQueueAttributesWithContextFunc.
func (mock *SQSAPIMock) SetQueueAttributesWithContext(contextMoqParam context.Context, setQueueAttributesInput *sqs.SetQueueAttributesInput, options ...request.Option) (*sqs.SetQueueAttributesOutput, error) {
	if mock.SetQueueAttributesWithContextFunc == nil {
		panic("SQSAPIMock.SetQueueAttributesWithContextFunc: method is nil but SQSAPI.SetQueueAttributesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		SetQueueAttributesInput *sqs.SetQueueAttributesInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		SetQueueAttributesInput: setQueueAttributesInput,
		Options:                 options,
	}
	mock.lockSetQueueAttributesWithContext.Lock()
	mock.calls.SetQueueAttributesWithContext = append(mock.calls.SetQueueAttributesWithContext, callInfo)
	mock.lockSetQueueAttributesWithContext.Unlock()
	return mock.SetQueueAttributesWithContextFunc(contextMoqParam, setQueueAttributesInput, options...)
}

// SetQueueAttributesWithContextCalls gets all the calls that were made to SetQueueAttributesWithContext.
// Check the length with:
//     len(mockedSQSAPI.SetQueueAttributesWithContextCalls())
func (mock *SQSAPIMock) SetQueueAttributesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	SetQueueAttributesInput *sqs.SetQueueAttributesInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		SetQueueAttributesInput *sqs.SetQueueAttributesInput
		Options                 []request.Option
	}
	mock.lockSetQueueAttributesWithContext.RLock()
	calls = mock.calls.SetQueueAttributesWithContext
	mock.lockSetQueueAttributesWithContext.RUnlock()
	return calls
}

// TagQueue calls TagQueueFunc.
func (mock *SQSAPIMock) TagQueue(tagQueueInput *sqs.TagQueueInput) (*sqs.TagQueueOutput, error) {
	if mock.TagQueueFunc == nil {
		panic("SQSAPIMock.TagQueueFunc: method is nil but SQSAPI.TagQueue was just called")
	}
	callInfo := struct {
		TagQueueInput *sqs.TagQueueInput
	}{
		TagQueueInput: tagQueueInput,
	}
	mock.lockTagQueue.Lock()
	mock.calls.TagQueue = append(mock.calls.TagQueue, callInfo)
	mock.lockTagQueue.Unlock()
	return mock.TagQueueFunc(tagQueueInput)
}

// TagQueueCalls gets all the calls that were made to TagQueue.
// Check the length with:
//     len(mockedSQSAPI.TagQueueCalls())
func (mock *SQSAPIMock) TagQueueCalls() []struct {
	TagQueueInput *sqs.TagQueueInput
} {
	var calls []struct {
		TagQueueInput *sqs.TagQueueInput
	}
	mock.lockTagQueue.RLock()
	calls = mock.calls.TagQueue
	mock.lockTagQueue.RUnlock()
	return calls
}

// TagQueueRequest calls TagQueueRequestFunc.
func (mock *SQSAPIMock) TagQueueRequest(tagQueueInput *sqs.TagQueueInput) (*request.Request, *sqs.TagQueueOutput) {
	if mock.TagQueueRequestFunc == nil {
		panic("SQSAPIMock.TagQueueRequestFunc: method is nil but SQSAPI.TagQueueRequest was just called")
	}
	callInfo := struct {
		TagQueueInput *sqs.TagQueueInput
	}{
		TagQueueInput: tagQueueInput,
	}
	mock.lockTagQueueRequest.Lock()
	mock.calls.TagQueueRequest = append(mock.calls.TagQueueRequest, callInfo)
	mock.lockTagQueueRequest.Unlock()
	return mock.TagQueueRequestFunc(tagQueueInput)
}

// TagQueueRequestCalls gets all the calls that were made to TagQueueRequest.
// Check the length with:
//     len(mockedSQSAPI.TagQueueRequestCalls())
func (mock *SQSAPIMock) TagQueueRequestCalls() []struct {
	TagQueueInput *sqs.TagQueueInput
} {
	var calls []struct {
		TagQueueInput *sqs.TagQueueInput
	}
	mock.lockTagQueueRequest.RLock()
	calls = mock.calls.TagQueueRequest
	mock.lockTagQueueRequest.RUnlock()
	return calls
}

// TagQueueWithContext calls TagQueueWithContextFunc.
func (mock *SQSAPIMock) TagQueueWithContext(contextMoqParam context.Context, tagQueueInput *sqs.TagQueueInput, options ...request.Option) (*sqs.TagQueueOutput, error) {
	if mock.TagQueueWithContextFunc == nil {
		panic("SQSAPIMock.TagQueueWithContextFunc: method is nil but SQSAPI.TagQueueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		TagQueueInput   *sqs.TagQueueInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		TagQueueInput:   tagQueueInput,
		Options:         options,
	}
	mock.lockTagQueueWithContext.Lock()
	mock.calls.TagQueueWithContext = append(mock.calls.TagQueueWithContext, callInfo)
	mock.lockTagQueueWithContext.Unlock()
	return mock.TagQueueWithContextFunc(contextMoqParam, tagQueueInput, options...)
}

// TagQueueWithContextCalls gets all the calls that were made to TagQueueWithContext.
// Check the length with:
//     len(mockedSQSAPI.TagQueueWithContextCalls())
func (mock *SQSAPIMock) TagQueueWithContextCalls() []struct {
	ContextMoqParam context.Context
	TagQueueInput   *sqs.TagQueueInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		TagQueueInput   *sqs.TagQueueInput
		Options         []request.Option
	}
	mock.lockTagQueueWithContext.RLock()
	calls = mock.calls.TagQueueWithContext
	mock.lockTagQueueWithContext.RUnlock()
	return calls
}

// UntagQueue calls UntagQueueFunc.
func (mock *SQSAPIMock) UntagQueue(untagQueueInput *sqs.UntagQueueInput) (*sqs.UntagQueueOutput, error) {
	if mock.UntagQueueFunc == nil {
		panic("SQSAPIMock.UntagQueueFunc: method is nil but SQSAPI.UntagQueue was just called")
	}
	callInfo := struct {
		UntagQueueInput *sqs.UntagQueueInput
	}{
		UntagQueueInput: untagQueueInput,
	}
	mock.lockUntagQueue.Lock()
	mock.calls.UntagQueue = append(mock.calls.UntagQueue, callInfo)
	mock.lockUntagQueue.Unlock()
	return mock.UntagQueueFunc(untagQueueInput)
}

// UntagQueueCalls gets all the calls that were made to UntagQueue.
// Check the length with:
//     len(mockedSQSAPI.UntagQueueCalls())
func (mock *SQSAPIMock) UntagQueueCalls() []struct {
	UntagQueueInput *sqs.UntagQueueInput
} {
	var calls []struct {
		UntagQueueInput *sqs.UntagQueueInput
	}
	mock.lockUntagQueue.RLock()
	calls = mock.calls.UntagQueue
	mock.lockUntagQueue.RUnlock()
	return calls
}

// UntagQueueRequest calls UntagQueueRequestFunc.
func (mock *SQSAPIMock) UntagQueueRequest(untagQueueInput *sqs.UntagQueueInput) (*request.Request, *sqs.UntagQueueOutput) {
	if mock.UntagQueueRequestFunc == nil {
		panic("SQSAPIMock.UntagQueueRequestFunc: method is nil but SQSAPI.UntagQueueRequest was just called")
	}
	callInfo := struct {
		UntagQueueInput *sqs.UntagQueueInput
	}{
		UntagQueueInput: untagQueueInput,
	}
	mock.lockUntagQueueRequest.Lock()
	mock.calls.UntagQueueRequest = append(mock.calls.UntagQueueRequest, callInfo)
	mock.lockUntagQueueRequest.Unlock()
	return mock.UntagQueueRequestFunc(untagQueueInput)
}

// UntagQueueRequestCalls gets all the calls that were made to UntagQueueRequest.
// Check the length with:
//     len(mockedSQSAPI.UntagQueueRequestCalls())
func (mock *SQSAPIMock) UntagQueueRequestCalls() []struct {
	UntagQueueInput *sqs.UntagQueueInput
} {
	var calls []struct {
		UntagQueueInput *sqs.UntagQueueInput
	}
	mock.lockUntagQueueRequest.RLock()
	calls = mock.calls.UntagQueueRequest
	mock.lockUntagQueueRequest.RUnlock()
	return calls
}

// UntagQueueWithContext calls UntagQueueWithContextFunc.
func (mock *SQSAPIMock) UntagQueueWithContext(contextMoqParam context.Context, untagQueueInput *sqs.UntagQueueInput, options ...request.Option) (*sqs.UntagQueueOutput, error) {
	if mock.UntagQueueWithContextFunc == nil {
		panic("SQSAPIMock.UntagQueueWithContextFunc: method is nil but SQSAPI.UntagQueueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UntagQueueInput *sqs.UntagQueueInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UntagQueueInput: untagQueueInput,
		Options:         options,
	}
	mock.lockUntagQueueWithContext.Lock()
	mock.calls.UntagQueueWithContext = append(mock.calls.UntagQueueWithContext, callInfo)
	mock.lockUntagQueueWithContext.Unlock()
	return mock.UntagQueueWithContextFunc(contextMoqParam, untagQueueInput, options...)
}

// UntagQueueWithContextCalls gets all the calls that were made to UntagQueueWithContext.
// Check the length with:
//     len(mockedSQSAPI.UntagQueueWithContextCalls())
func (mock *SQSAPIMock) UntagQueueWithContextCalls() []struct {
	ContextMoqParam context.Context
	UntagQueueInput *sqs.UntagQueueInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		UntagQueueInput *sqs.UntagQueueInput
		Options         []request.Option
	}
	mock.lockUntagQueueWithContext.RLock()
	calls = mock.calls.UntagQueueWithContext
	mock.lockUntagQueueWithContext.RUnlock()
	return calls
}

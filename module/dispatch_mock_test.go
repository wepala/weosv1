// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package module_test

import (
	"context"
	"github.com/wepala/weos/module"
	"sync"
)

var (
	lockDispatcherMockDispatch sync.RWMutex
)

// Ensure, that DispatcherMock does implement module.Dispatcher.
// If this is not the case, regenerate this file with moq.
var _ module.Dispatcher = &DispatcherMock{}

// DispatcherMock is a mock implementation of module.Dispatcher.
//
//     func TestSomethingThatUsesDispatcher(t *testing.T) {
//
//         // make and configure a mocked module.Dispatcher
//         mockedDispatcher := &DispatcherMock{
//             DispatchFunc: func(ctx context.Context, command *module.Command) error {
// 	               panic("mock out the Dispatch method")
//             },
//         }
//
//         // use mockedDispatcher in code that requires module.Dispatcher
//         // and then make assertions.
//
//     }
type DispatcherMock struct {
	// DispatchFunc mocks the Dispatch method.
	DispatchFunc func(ctx context.Context, command *module.Command) error

	// calls tracks calls to the methods.
	calls struct {
		// Dispatch holds details about calls to the Dispatch method.
		Dispatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Command is the command argument value.
			Command *module.Command
		}
	}
}

// Dispatch calls DispatchFunc.
func (mock *DispatcherMock) Dispatch(ctx context.Context, command *module.Command) error {
	if mock.DispatchFunc == nil {
		panic("DispatcherMock.DispatchFunc: method is nil but Dispatcher.Dispatch was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Command *module.Command
	}{
		Ctx:     ctx,
		Command: command,
	}
	lockDispatcherMockDispatch.Lock()
	mock.calls.Dispatch = append(mock.calls.Dispatch, callInfo)
	lockDispatcherMockDispatch.Unlock()
	return mock.DispatchFunc(ctx, command)
}

// DispatchCalls gets all the calls that were made to Dispatch.
// Check the length with:
//     len(mockedDispatcher.DispatchCalls())
func (mock *DispatcherMock) DispatchCalls() []struct {
	Ctx     context.Context
	Command *module.Command
} {
	var calls []struct {
		Ctx     context.Context
		Command *module.Command
	}
	lockDispatcherMockDispatch.RLock()
	calls = mock.calls.Dispatch
	lockDispatcherMockDispatch.RUnlock()
	return calls
}
